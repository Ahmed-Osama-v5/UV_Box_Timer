
UV_BoxTimer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000096  00000000  00000000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000e3d  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  00000e3d  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000e6c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000120  00000000  00000000  00000e7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000021fb  00000000  00000000  00000f9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000098d  00000000  00000000  00003195  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001056  00000000  00000000  00003b22  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000036c  00000000  00000000  00004b78  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000021e  00000000  00000000  00004ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000f36  00000000  00000000  00005102  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e0  00000000  00000000  00006038  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000002  00000d5e  00000d5e  00000e32  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00006118  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.DIO_init 000000d0  0000075c  0000075c  00000830  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.DIO_Write 000000b4  000008e8  000008e8  000009bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.DIO_Read 00000076  00000ad2  00000ad2  00000ba6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.EEPROM_read 0000002a  00000d26  00000d26  00000dfa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.EEPROM_write 0000002c  00000cfa  00000cfa  00000dce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.EEPROM_update 0000006a  00000b48  00000b48  00000c1c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.timerCBK 00000084  00000a4e  00000a4e  00000b22  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.isBTN_Pressed 000000de  000005a2  000005a2  00000676  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.segmentWrite 000000b2  0000099c  0000099c  00000a70  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.displayWrite 00000158  0000044a  0000044a  0000051e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.systemInit 00000174  000002d6  000002d6  000003aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.main    000000bc  0000082c  0000082c  00000900  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .bss.storedSeconds 00000001  00800075  00800075  00000e3d  2**0
                  ALLOC
 27 .bss.storedMinutes 00000001  00800076  00800076  00000e3d  2**0
                  ALLOC
 28 .bss.ovfs     00000001  00800077  00800077  00000e3d  2**0
                  ALLOC
 29 .bss.seconds  00000001  00800078  00800078  00000e3d  2**0
                  ALLOC
 30 .data.minutes 00000001  00800079  00000d68  00000e3c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 31 .bss.DN_BTN_ConfidenceLow 00000002  0080006f  0080006f  00000e3d  2**0
                  ALLOC
 32 .bss.UP_BTN_ConfidenceLow 00000002  00800071  00800071  00000e3d  2**0
                  ALLOC
 33 .bss.OK_BTN_ConfidenceLow 00000002  00800073  00800073  00000e3d  2**0
                  ALLOC
 34 .bss.systemState 00000001  0080007a  0080007a  00000e3d  2**0
                  ALLOC
 35 .progmemx.data.segArray 0000000a  00000096  00000096  0000016a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 36 .text.Timer_Init 000000dc  00000680  00000680  00000754  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.Timer_Start 00000236  000000a0  000000a0  00000174  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.Timer_Stop 0000005e  00000bb2  00000bb2  00000c86  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.__vector_9 0000004e  00000c10  00000c10  00000ce4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.__vector_8 0000004e  00000c5e  00000c5e  00000d32  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.__vector_4 0000004e  00000cac  00000cac  00000d80  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .bss.Timer_OVF_CBK_Ptr 00000006  00800060  00800060  00000e3d  2**0
                  ALLOC
 43 .bss.gsau8_initState 00000003  00800066  00800066  00000e3d  2**0
                  ALLOC
 44 .bss.gsau8_preScaler 00000003  00800069  00800069  00000e3d  2**0
                  ALLOC
 45 .bss.gsau8_mode 00000003  0080006c  0080006c  00000e3d  2**0
                  ALLOC
 46 .text.__dummy_fini 00000002  00000d60  00000d60  00000e34  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text.__dummy_funcs_on_exit 00000002  00000d62  00000d62  00000e36  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text.__dummy_simulator_exit 00000002  00000d64  00000d64  00000e38  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .text.exit    0000000e  00000d50  00000d50  00000e24  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .text._Exit   00000002  00000d66  00000d66  00000e3a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	22 c0       	rjmp	.+68     	; 0x46 <__ctors_end>
   2:	ad c6       	rjmp	.+3418   	; 0xd5e <__bad_interrupt>
   4:	ac c6       	rjmp	.+3416   	; 0xd5e <__bad_interrupt>
   6:	ab c6       	rjmp	.+3414   	; 0xd5e <__bad_interrupt>
   8:	51 c6       	rjmp	.+3234   	; 0xcac <__vector_4>
   a:	a9 c6       	rjmp	.+3410   	; 0xd5e <__bad_interrupt>
   c:	a8 c6       	rjmp	.+3408   	; 0xd5e <__bad_interrupt>
   e:	a7 c6       	rjmp	.+3406   	; 0xd5e <__bad_interrupt>
  10:	26 c6       	rjmp	.+3148   	; 0xc5e <__vector_8>
  12:	fe c5       	rjmp	.+3068   	; 0xc10 <__vector_9>
  14:	a4 c6       	rjmp	.+3400   	; 0xd5e <__bad_interrupt>
  16:	a3 c6       	rjmp	.+3398   	; 0xd5e <__bad_interrupt>
  18:	a2 c6       	rjmp	.+3396   	; 0xd5e <__bad_interrupt>
  1a:	a1 c6       	rjmp	.+3394   	; 0xd5e <__bad_interrupt>
  1c:	a0 c6       	rjmp	.+3392   	; 0xd5e <__bad_interrupt>
  1e:	9f c6       	rjmp	.+3390   	; 0xd5e <__bad_interrupt>
  20:	9e c6       	rjmp	.+3388   	; 0xd5e <__bad_interrupt>
  22:	9d c6       	rjmp	.+3386   	; 0xd5e <__bad_interrupt>
  24:	9c c6       	rjmp	.+3384   	; 0xd5e <__bad_interrupt>
  26:	16 c1       	rjmp	.+556    	; 0x254 <__EEPROM_REGION_LENGTH__+0x54>
  28:	1d c1       	rjmp	.+570    	; 0x264 <__EEPROM_REGION_LENGTH__+0x64>
  2a:	23 c1       	rjmp	.+582    	; 0x272 <__EEPROM_REGION_LENGTH__+0x72>
  2c:	29 c1       	rjmp	.+594    	; 0x280 <__EEPROM_REGION_LENGTH__+0x80>
  2e:	2f c1       	rjmp	.+606    	; 0x28e <__EEPROM_REGION_LENGTH__+0x8e>
  30:	35 c1       	rjmp	.+618    	; 0x29c <__EEPROM_REGION_LENGTH__+0x9c>
  32:	3b c1       	rjmp	.+630    	; 0x2aa <__EEPROM_REGION_LENGTH__+0xaa>

00000034 <.dinit>:
  34:	00 60       	ori	r16, 0x00	; 0
  36:	00 79       	andi	r16, 0x90	; 144
  38:	80 00       	.word	0x0080	; ????
  3a:	79 00       	.word	0x0079	; ????
  3c:	7a 00       	.word	0x007a	; ????
  3e:	0d 68       	ori	r16, 0x8D	; 141
  40:	00 7a       	andi	r16, 0xA0	; 160
  42:	00 7b       	andi	r16, 0xB0	; 176
  44:	80 00       	.word	0x0080	; ????

00000046 <__ctors_end>:
  46:	11 24       	eor	r1, r1
  48:	1f be       	out	0x3f, r1	; 63
  4a:	cf e5       	ldi	r28, 0x5F	; 95
  4c:	d4 e0       	ldi	r29, 0x04	; 4
  4e:	de bf       	out	0x3e, r29	; 62
  50:	cd bf       	out	0x3d, r28	; 61

00000052 <__do_copy_data>:
  52:	e4 e3       	ldi	r30, 0x34	; 52
  54:	f0 e0       	ldi	r31, 0x00	; 0
  56:	40 e0       	ldi	r20, 0x00	; 0
  58:	17 c0       	rjmp	.+46     	; 0x88 <__do_clear_bss+0x8>
  5a:	b5 91       	lpm	r27, Z+
  5c:	a5 91       	lpm	r26, Z+
  5e:	35 91       	lpm	r19, Z+
  60:	25 91       	lpm	r18, Z+
  62:	05 91       	lpm	r16, Z+
  64:	07 fd       	sbrc	r16, 7
  66:	0c c0       	rjmp	.+24     	; 0x80 <__do_clear_bss>
  68:	95 91       	lpm	r25, Z+
  6a:	85 91       	lpm	r24, Z+
  6c:	ef 01       	movw	r28, r30
  6e:	f9 2f       	mov	r31, r25
  70:	e8 2f       	mov	r30, r24
  72:	05 90       	lpm	r0, Z+
  74:	0d 92       	st	X+, r0
  76:	a2 17       	cp	r26, r18
  78:	b3 07       	cpc	r27, r19
  7a:	d9 f7       	brne	.-10     	; 0x72 <__do_copy_data+0x20>
  7c:	fe 01       	movw	r30, r28
  7e:	04 c0       	rjmp	.+8      	; 0x88 <__do_clear_bss+0x8>

00000080 <__do_clear_bss>:
  80:	1d 92       	st	X+, r1
  82:	a2 17       	cp	r26, r18
  84:	b3 07       	cpc	r27, r19
  86:	e1 f7       	brne	.-8      	; 0x80 <__do_clear_bss>
  88:	e5 34       	cpi	r30, 0x45	; 69
  8a:	f4 07       	cpc	r31, r20
  8c:	31 f7       	brne	.-52     	; 0x5a <__do_copy_data+0x8>
  8e:	ce d3       	rcall	.+1948   	; 0x82c <main>
  90:	5f c6       	rjmp	.+3262   	; 0xd50 <exit>

00000092 <_exit>:
  92:	f8 94       	cli

00000094 <__stop_program>:
  94:	ff cf       	rjmp	.-2      	; 0x94 <__stop_program>

Disassembly of section .text:

00000d5e <__bad_interrupt>:
 d5e:	50 c9       	rjmp	.-3424   	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.DIO_init:

0000075c <DIO_init>:
*In/Out:
*Description: This function can set the direction of a full port, a nibble
* 			  or even one pin.
*/
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
 75c:	fc 01       	movw	r30, r24
	if(NULL != DIO_info)
 75e:	89 2b       	or	r24, r25
 760:	09 f4       	brne	.+2      	; 0x764 <DIO_init+0x8>
 762:	60 c0       	rjmp	.+192    	; 0x824 <DIO_init+0xc8>
	{
		switch (DIO_info->GPIO)
 764:	80 81       	ld	r24, Z
 766:	82 30       	cpi	r24, 0x02	; 2
 768:	09 f1       	breq	.+66     	; 0x7ac <DIO_init+0x50>
 76a:	83 30       	cpi	r24, 0x03	; 3
 76c:	e9 f1       	breq	.+122    	; 0x7e8 <DIO_init+0x8c>
 76e:	81 30       	cpi	r24, 0x01	; 1
 770:	09 f0       	breq	.+2      	; 0x774 <DIO_init+0x18>
 772:	5a c0       	rjmp	.+180    	; 0x828 <DIO_init+0xcc>
				DDRA &= ~(1 << DIO_info->pins);
			}
			break;
			*/
		case (GPIOB):
			if(DIO_info->dir == OUTPUT)
 774:	92 81       	ldd	r25, Z+2	; 0x02
 776:	9f 3f       	cpi	r25, 0xFF	; 255
 778:	61 f4       	brne	.+24     	; 0x792 <DIO_init+0x36>
			{
				DDRB |= (1 << DIO_info->pins);
 77a:	97 b3       	in	r25, 0x17	; 23
 77c:	21 e0       	ldi	r18, 0x01	; 1
 77e:	30 e0       	ldi	r19, 0x00	; 0
 780:	01 80       	ldd	r0, Z+1	; 0x01
 782:	02 c0       	rjmp	.+4      	; 0x788 <DIO_init+0x2c>
 784:	22 0f       	add	r18, r18
 786:	33 1f       	adc	r19, r19
 788:	0a 94       	dec	r0
 78a:	e2 f7       	brpl	.-8      	; 0x784 <DIO_init+0x28>
 78c:	29 2b       	or	r18, r25
 78e:	27 bb       	out	0x17, r18	; 23
 790:	08 95       	ret
			}
			else
			{
				DDRB &= ~(1 << DIO_info->pins);
 792:	97 b3       	in	r25, 0x17	; 23
 794:	21 e0       	ldi	r18, 0x01	; 1
 796:	30 e0       	ldi	r19, 0x00	; 0
 798:	01 80       	ldd	r0, Z+1	; 0x01
 79a:	02 c0       	rjmp	.+4      	; 0x7a0 <DIO_init+0x44>
 79c:	22 0f       	add	r18, r18
 79e:	33 1f       	adc	r19, r19
 7a0:	0a 94       	dec	r0
 7a2:	e2 f7       	brpl	.-8      	; 0x79c <DIO_init+0x40>
 7a4:	20 95       	com	r18
 7a6:	29 23       	and	r18, r25
 7a8:	27 bb       	out	0x17, r18	; 23
 7aa:	08 95       	ret
			}
			break;
		case (GPIOC):
			if(DIO_info->dir == OUTPUT)
 7ac:	82 81       	ldd	r24, Z+2	; 0x02
 7ae:	8f 3f       	cpi	r24, 0xFF	; 255
 7b0:	69 f4       	brne	.+26     	; 0x7cc <DIO_init+0x70>
			{
				DDRC |= (1 << DIO_info->pins);
 7b2:	24 b3       	in	r18, 0x14	; 20
 7b4:	81 e0       	ldi	r24, 0x01	; 1
 7b6:	90 e0       	ldi	r25, 0x00	; 0
 7b8:	01 80       	ldd	r0, Z+1	; 0x01
 7ba:	02 c0       	rjmp	.+4      	; 0x7c0 <DIO_init+0x64>
 7bc:	88 0f       	add	r24, r24
 7be:	99 1f       	adc	r25, r25
 7c0:	0a 94       	dec	r0
 7c2:	e2 f7       	brpl	.-8      	; 0x7bc <DIO_init+0x60>
 7c4:	82 2b       	or	r24, r18
 7c6:	84 bb       	out	0x14, r24	; 20
	}
	else
	{
		return E_NOK;
	}
	return E_OK;
 7c8:	81 e0       	ldi	r24, 0x01	; 1
 7ca:	08 95       	ret
			{
				DDRC |= (1 << DIO_info->pins);
			}
			else
			{
				DDRC &= ~(1 << DIO_info->pins);
 7cc:	24 b3       	in	r18, 0x14	; 20
 7ce:	81 e0       	ldi	r24, 0x01	; 1
 7d0:	90 e0       	ldi	r25, 0x00	; 0
 7d2:	01 80       	ldd	r0, Z+1	; 0x01
 7d4:	02 c0       	rjmp	.+4      	; 0x7da <DIO_init+0x7e>
 7d6:	88 0f       	add	r24, r24
 7d8:	99 1f       	adc	r25, r25
 7da:	0a 94       	dec	r0
 7dc:	e2 f7       	brpl	.-8      	; 0x7d6 <DIO_init+0x7a>
 7de:	80 95       	com	r24
 7e0:	82 23       	and	r24, r18
 7e2:	84 bb       	out	0x14, r24	; 20
	}
	else
	{
		return E_NOK;
	}
	return E_OK;
 7e4:	81 e0       	ldi	r24, 0x01	; 1
 7e6:	08 95       	ret
			{
				DDRC &= ~(1 << DIO_info->pins);
			}
			break;
		case (GPIOD):
			if(DIO_info->dir == OUTPUT)
 7e8:	82 81       	ldd	r24, Z+2	; 0x02
 7ea:	8f 3f       	cpi	r24, 0xFF	; 255
 7ec:	69 f4       	brne	.+26     	; 0x808 <DIO_init+0xac>
			{
				DDRD |= (1 << DIO_info->pins);
 7ee:	21 b3       	in	r18, 0x11	; 17
 7f0:	81 e0       	ldi	r24, 0x01	; 1
 7f2:	90 e0       	ldi	r25, 0x00	; 0
 7f4:	01 80       	ldd	r0, Z+1	; 0x01
 7f6:	02 c0       	rjmp	.+4      	; 0x7fc <DIO_init+0xa0>
 7f8:	88 0f       	add	r24, r24
 7fa:	99 1f       	adc	r25, r25
 7fc:	0a 94       	dec	r0
 7fe:	e2 f7       	brpl	.-8      	; 0x7f8 <DIO_init+0x9c>
 800:	82 2b       	or	r24, r18
 802:	81 bb       	out	0x11, r24	; 17
	}
	else
	{
		return E_NOK;
	}
	return E_OK;
 804:	81 e0       	ldi	r24, 0x01	; 1
 806:	08 95       	ret
			{
				DDRD |= (1 << DIO_info->pins);
			}
			else
			{
				DDRD &= ~(1 << DIO_info->pins);
 808:	21 b3       	in	r18, 0x11	; 17
 80a:	81 e0       	ldi	r24, 0x01	; 1
 80c:	90 e0       	ldi	r25, 0x00	; 0
 80e:	01 80       	ldd	r0, Z+1	; 0x01
 810:	02 c0       	rjmp	.+4      	; 0x816 <DIO_init+0xba>
 812:	88 0f       	add	r24, r24
 814:	99 1f       	adc	r25, r25
 816:	0a 94       	dec	r0
 818:	e2 f7       	brpl	.-8      	; 0x812 <DIO_init+0xb6>
 81a:	80 95       	com	r24
 81c:	82 23       	and	r24, r18
 81e:	81 bb       	out	0x11, r24	; 17
	}
	else
	{
		return E_NOK;
	}
	return E_OK;
 820:	81 e0       	ldi	r24, 0x01	; 1
 822:	08 95       	ret
			break;
		}
	}
	else
	{
		return E_NOK;
 824:	80 e0       	ldi	r24, 0x00	; 0
 826:	08 95       	ret
			{
				DDRD &= ~(1 << DIO_info->pins);
			}
			break;
		default:
			return E_NOK;
 828:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		return E_NOK;
	}
	return E_OK;
}
 82a:	08 95       	ret

Disassembly of section .text.DIO_Write:

000008e8 <DIO_Write>:
*Description: This function can set the value of a full port, a nibble
* 			  or even one pin.
*/
ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{
	switch(GPIO)
 8e8:	82 30       	cpi	r24, 0x02	; 2
 8ea:	01 f1       	breq	.+64     	; 0x92c <DIO_Write+0x44>
 8ec:	83 30       	cpi	r24, 0x03	; 3
 8ee:	c9 f1       	breq	.+114    	; 0x962 <DIO_Write+0x7a>
 8f0:	81 30       	cpi	r24, 0x01	; 1
 8f2:	09 f0       	breq	.+2      	; 0x8f6 <DIO_Write+0xe>
 8f4:	51 c0       	rjmp	.+162    	; 0x998 <DIO_Write+0xb0>
			PORTA &= ~(1 << pins);
		}
		break;
		*/
	case (GPIOB):
		if(value)
 8f6:	44 23       	and	r20, r20
 8f8:	61 f0       	breq	.+24     	; 0x912 <DIO_Write+0x2a>
		{
			PORTB |= (1 << pins);
 8fa:	28 b3       	in	r18, 0x18	; 24
 8fc:	81 e0       	ldi	r24, 0x01	; 1
 8fe:	90 e0       	ldi	r25, 0x00	; 0
 900:	02 c0       	rjmp	.+4      	; 0x906 <DIO_Write+0x1e>
 902:	88 0f       	add	r24, r24
 904:	99 1f       	adc	r25, r25
 906:	6a 95       	dec	r22
 908:	e2 f7       	brpl	.-8      	; 0x902 <DIO_Write+0x1a>
 90a:	82 2b       	or	r24, r18
 90c:	88 bb       	out	0x18, r24	; 24
		break;
	default:
		return E_NOK;
		break;
	}
	return E_OK;
 90e:	81 e0       	ldi	r24, 0x01	; 1
 910:	08 95       	ret
		{
			PORTB |= (1 << pins);
		}
		else
		{
			PORTB &= ~(1 << pins);
 912:	28 b3       	in	r18, 0x18	; 24
 914:	81 e0       	ldi	r24, 0x01	; 1
 916:	90 e0       	ldi	r25, 0x00	; 0
 918:	02 c0       	rjmp	.+4      	; 0x91e <DIO_Write+0x36>
 91a:	88 0f       	add	r24, r24
 91c:	99 1f       	adc	r25, r25
 91e:	6a 95       	dec	r22
 920:	e2 f7       	brpl	.-8      	; 0x91a <DIO_Write+0x32>
 922:	80 95       	com	r24
 924:	82 23       	and	r24, r18
 926:	88 bb       	out	0x18, r24	; 24
		break;
	default:
		return E_NOK;
		break;
	}
	return E_OK;
 928:	81 e0       	ldi	r24, 0x01	; 1
 92a:	08 95       	ret
		{
			PORTB &= ~(1 << pins);
		}
		break;
	case (GPIOC):
		if(value)
 92c:	44 23       	and	r20, r20
 92e:	61 f0       	breq	.+24     	; 0x948 <DIO_Write+0x60>
		{
			PORTC |= (1 << pins);
 930:	25 b3       	in	r18, 0x15	; 21
 932:	81 e0       	ldi	r24, 0x01	; 1
 934:	90 e0       	ldi	r25, 0x00	; 0
 936:	02 c0       	rjmp	.+4      	; 0x93c <DIO_Write+0x54>
 938:	88 0f       	add	r24, r24
 93a:	99 1f       	adc	r25, r25
 93c:	6a 95       	dec	r22
 93e:	e2 f7       	brpl	.-8      	; 0x938 <DIO_Write+0x50>
 940:	82 2b       	or	r24, r18
 942:	85 bb       	out	0x15, r24	; 21
		break;
	default:
		return E_NOK;
		break;
	}
	return E_OK;
 944:	81 e0       	ldi	r24, 0x01	; 1
 946:	08 95       	ret
		{
			PORTC |= (1 << pins);
		}
		else
		{
			PORTC &= ~(1 << pins);
 948:	25 b3       	in	r18, 0x15	; 21
 94a:	81 e0       	ldi	r24, 0x01	; 1
 94c:	90 e0       	ldi	r25, 0x00	; 0
 94e:	02 c0       	rjmp	.+4      	; 0x954 <DIO_Write+0x6c>
 950:	88 0f       	add	r24, r24
 952:	99 1f       	adc	r25, r25
 954:	6a 95       	dec	r22
 956:	e2 f7       	brpl	.-8      	; 0x950 <DIO_Write+0x68>
 958:	80 95       	com	r24
 95a:	82 23       	and	r24, r18
 95c:	85 bb       	out	0x15, r24	; 21
		break;
	default:
		return E_NOK;
		break;
	}
	return E_OK;
 95e:	81 e0       	ldi	r24, 0x01	; 1
 960:	08 95       	ret
		{
			PORTC &= ~(1 << pins);
		}
		break;
	case (GPIOD):
		if(value)
 962:	44 23       	and	r20, r20
 964:	61 f0       	breq	.+24     	; 0x97e <DIO_Write+0x96>
		{
			PORTD |= (1 << pins);
 966:	22 b3       	in	r18, 0x12	; 18
 968:	81 e0       	ldi	r24, 0x01	; 1
 96a:	90 e0       	ldi	r25, 0x00	; 0
 96c:	02 c0       	rjmp	.+4      	; 0x972 <DIO_Write+0x8a>
 96e:	88 0f       	add	r24, r24
 970:	99 1f       	adc	r25, r25
 972:	6a 95       	dec	r22
 974:	e2 f7       	brpl	.-8      	; 0x96e <DIO_Write+0x86>
 976:	82 2b       	or	r24, r18
 978:	82 bb       	out	0x12, r24	; 18
		break;
	default:
		return E_NOK;
		break;
	}
	return E_OK;
 97a:	81 e0       	ldi	r24, 0x01	; 1
 97c:	08 95       	ret
		{
			PORTD |= (1 << pins);
		}
		else
		{
			PORTD &= ~(1 << pins);
 97e:	22 b3       	in	r18, 0x12	; 18
 980:	81 e0       	ldi	r24, 0x01	; 1
 982:	90 e0       	ldi	r25, 0x00	; 0
 984:	02 c0       	rjmp	.+4      	; 0x98a <DIO_Write+0xa2>
 986:	88 0f       	add	r24, r24
 988:	99 1f       	adc	r25, r25
 98a:	6a 95       	dec	r22
 98c:	e2 f7       	brpl	.-8      	; 0x986 <DIO_Write+0x9e>
 98e:	80 95       	com	r24
 990:	82 23       	and	r24, r18
 992:	82 bb       	out	0x12, r24	; 18
		break;
	default:
		return E_NOK;
		break;
	}
	return E_OK;
 994:	81 e0       	ldi	r24, 0x01	; 1
 996:	08 95       	ret
		{
			PORTD &= ~(1 << pins);
		}
		break;
	default:
		return E_NOK;
 998:	80 e0       	ldi	r24, 0x00	; 0
		break;
	}
	return E_OK;
}
 99a:	08 95       	ret

Disassembly of section .text.DIO_Read:

00000ad2 <DIO_Read>:
*Description: This function gets the value of a full port, a nibble
* 			  or even one pin.
*/
ERROR_STATUS DIO_Read (uint8_t GPIO,uint8_t pins, uint8_t *data)
{
	switch(GPIO)
 ad2:	82 30       	cpi	r24, 0x02	; 2
 ad4:	a9 f0       	breq	.+42     	; 0xb00 <DIO_Read+0x2e>
 ad6:	83 30       	cpi	r24, 0x03	; 3
 ad8:	21 f1       	breq	.+72     	; 0xb22 <DIO_Read+0x50>
 ada:	81 30       	cpi	r24, 0x01	; 1
 adc:	99 f5       	brne	.+102    	; 0xb44 <DIO_Read+0x72>
			*data = LOW;
		}
		break;
		*/
	case (GPIOB):
		if(PINB & (1 << pins))
 ade:	86 b3       	in	r24, 0x16	; 22
 ae0:	90 e0       	ldi	r25, 0x00	; 0
 ae2:	02 c0       	rjmp	.+4      	; 0xae8 <DIO_Read+0x16>
 ae4:	95 95       	asr	r25
 ae6:	87 95       	ror	r24
 ae8:	6a 95       	dec	r22
 aea:	e2 f7       	brpl	.-8      	; 0xae4 <DIO_Read+0x12>
 aec:	80 ff       	sbrs	r24, 0
 aee:	04 c0       	rjmp	.+8      	; 0xaf8 <DIO_Read+0x26>
		{
			*data = HIGH;
 af0:	81 e0       	ldi	r24, 0x01	; 1
 af2:	fa 01       	movw	r30, r20
 af4:	80 83       	st	Z, r24
 af6:	08 95       	ret
		}
		else
		{
			*data = LOW;
 af8:	fa 01       	movw	r30, r20
 afa:	10 82       	st	Z, r1
		break;
	default:
		return E_NOK;
		break;
	}
	return E_OK;
 afc:	81 e0       	ldi	r24, 0x01	; 1
 afe:	08 95       	ret
		{
			*data = LOW;
		}
		break;
	case (GPIOC):
		if(PINC & (1 << pins))
 b00:	83 b3       	in	r24, 0x13	; 19
 b02:	90 e0       	ldi	r25, 0x00	; 0
 b04:	02 c0       	rjmp	.+4      	; 0xb0a <DIO_Read+0x38>
 b06:	95 95       	asr	r25
 b08:	87 95       	ror	r24
 b0a:	6a 95       	dec	r22
 b0c:	e2 f7       	brpl	.-8      	; 0xb06 <DIO_Read+0x34>
 b0e:	80 ff       	sbrs	r24, 0
 b10:	04 c0       	rjmp	.+8      	; 0xb1a <DIO_Read+0x48>
		{
			*data = HIGH;
 b12:	81 e0       	ldi	r24, 0x01	; 1
 b14:	fa 01       	movw	r30, r20
 b16:	80 83       	st	Z, r24
 b18:	08 95       	ret
		}
		else
		{
			*data = LOW;
 b1a:	fa 01       	movw	r30, r20
 b1c:	10 82       	st	Z, r1
		break;
	default:
		return E_NOK;
		break;
	}
	return E_OK;
 b1e:	81 e0       	ldi	r24, 0x01	; 1
 b20:	08 95       	ret
		{
			*data = LOW;
		}
		break;
	case (GPIOD):
		if(PIND & (1 << pins))
 b22:	80 b3       	in	r24, 0x10	; 16
 b24:	90 e0       	ldi	r25, 0x00	; 0
 b26:	02 c0       	rjmp	.+4      	; 0xb2c <DIO_Read+0x5a>
 b28:	95 95       	asr	r25
 b2a:	87 95       	ror	r24
 b2c:	6a 95       	dec	r22
 b2e:	e2 f7       	brpl	.-8      	; 0xb28 <DIO_Read+0x56>
 b30:	80 ff       	sbrs	r24, 0
 b32:	04 c0       	rjmp	.+8      	; 0xb3c <DIO_Read+0x6a>
		{
			*data = HIGH;
 b34:	81 e0       	ldi	r24, 0x01	; 1
 b36:	fa 01       	movw	r30, r20
 b38:	80 83       	st	Z, r24
 b3a:	08 95       	ret
		}
		else
		{
			*data = LOW;
 b3c:	fa 01       	movw	r30, r20
 b3e:	10 82       	st	Z, r1
		break;
	default:
		return E_NOK;
		break;
	}
	return E_OK;
 b40:	81 e0       	ldi	r24, 0x01	; 1
 b42:	08 95       	ret
		{
			*data = LOW;
		}
		break;
	default:
		return E_NOK;
 b44:	80 e0       	ldi	r24, 0x00	; 0
		break;
	}
	return E_OK;
}
 b46:	08 95       	ret

Disassembly of section .text.EEPROM_read:

00000d26 <EEPROM_read>:
#include "eeprom.h"

uint8_t EEPROM_read(uint16_t uiAddress, uint8_t *data)
{
 d26:	9c 01       	movw	r18, r24
	
	if(uiAddress > EEPROM_SIZE){
 d28:	21 15       	cp	r18, r1
 d2a:	84 e0       	ldi	r24, 0x04	; 4
 d2c:	38 07       	cpc	r19, r24
 d2e:	70 f4       	brcc	.+28     	; 0xd4c <EEPROM_read+0x26>
		return EEPROM_INVALID_ADDR;
	}
	
	/* Wait for completion of previous write */
	while(EECR & (1<<EEWE));
 d30:	9c b3       	in	r25, 0x1c	; 28
 d32:	89 2f       	mov	r24, r25
 d34:	82 70       	andi	r24, 0x02	; 2
 d36:	91 fd       	sbrc	r25, 1
 d38:	fb cf       	rjmp	.-10     	; 0xd30 <EEPROM_read+0xa>
	/* Set up address register */
	EEARH = (uiAddress & 0xFF00) >> 8;
 d3a:	3f bb       	out	0x1f, r19	; 31
	EEARL = (uiAddress & 0x00FF);
 d3c:	2e bb       	out	0x1e, r18	; 30
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
 d3e:	9c b3       	in	r25, 0x1c	; 28
 d40:	91 60       	ori	r25, 0x01	; 1
 d42:	9c bb       	out	0x1c, r25	; 28
	/* Return data from Data Register */
	*data = EEDR;
 d44:	9d b3       	in	r25, 0x1d	; 29
 d46:	fb 01       	movw	r30, r22
 d48:	90 83       	st	Z, r25
	return EEPROM_OK;
 d4a:	08 95       	ret

uint8_t EEPROM_read(uint16_t uiAddress, uint8_t *data)
{
	
	if(uiAddress > EEPROM_SIZE){
		return EEPROM_INVALID_ADDR;
 d4c:	82 e0       	ldi	r24, 0x02	; 2
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
	/* Return data from Data Register */
	*data = EEDR;
	return EEPROM_OK;
}
 d4e:	08 95       	ret

Disassembly of section .text.EEPROM_write:

00000cfa <EEPROM_write>:


uint8_t EEPROM_write(uint16_t uiAddress, uint8_t ucData)
{
 cfa:	9c 01       	movw	r18, r24
	if(uiAddress > EEPROM_SIZE){
 cfc:	21 15       	cp	r18, r1
 cfe:	84 e0       	ldi	r24, 0x04	; 4
 d00:	38 07       	cpc	r19, r24
 d02:	78 f4       	brcc	.+30     	; 0xd22 <EEPROM_write+0x28>
		return EEPROM_INVALID_ADDR;
	}
	/* Wait for completion of previous write */
	while(EECR & (1<<EEWE));
 d04:	9c b3       	in	r25, 0x1c	; 28
 d06:	89 2f       	mov	r24, r25
 d08:	82 70       	andi	r24, 0x02	; 2
 d0a:	91 fd       	sbrc	r25, 1
 d0c:	fb cf       	rjmp	.-10     	; 0xd04 <EEPROM_write+0xa>
	/* Set up address and Data Registers */
	EEARH = (uiAddress & 0xFF00) >> 8;
 d0e:	3f bb       	out	0x1f, r19	; 31
	EEARL = (uiAddress & 0x00FF);
 d10:	2e bb       	out	0x1e, r18	; 30
	EEDR = ucData;
 d12:	6d bb       	out	0x1d, r22	; 29
	/* Write logical one to EEMPE */
	EECR |= (1<<EEMWE);
 d14:	9c b3       	in	r25, 0x1c	; 28
 d16:	94 60       	ori	r25, 0x04	; 4
 d18:	9c bb       	out	0x1c, r25	; 28
	/* Start eeprom write by setting EEPE */
	EECR |= (1<<EEWE);
 d1a:	9c b3       	in	r25, 0x1c	; 28
 d1c:	92 60       	ori	r25, 0x02	; 2
 d1e:	9c bb       	out	0x1c, r25	; 28
	return EEPROM_OK;
 d20:	08 95       	ret


uint8_t EEPROM_write(uint16_t uiAddress, uint8_t ucData)
{
	if(uiAddress > EEPROM_SIZE){
		return EEPROM_INVALID_ADDR;
 d22:	82 e0       	ldi	r24, 0x02	; 2
	/* Write logical one to EEMPE */
	EECR |= (1<<EEMWE);
	/* Start eeprom write by setting EEPE */
	EECR |= (1<<EEWE);
	return EEPROM_OK;
}
 d24:	08 95       	ret

Disassembly of section .text.EEPROM_update:

00000b48 <EEPROM_update>:

uint8_t EEPROM_update(uint16_t uiAddress, uint8_t ucData){
 b48:	ff 92       	push	r15
 b4a:	0f 93       	push	r16
 b4c:	1f 93       	push	r17
 b4e:	cf 93       	push	r28
 b50:	df 93       	push	r29
 b52:	0f 92       	push	r0
 b54:	cd b7       	in	r28, 0x3d	; 61
 b56:	de b7       	in	r29, 0x3e	; 62
	uint8_t err = EEPROM_OK;
	if(uiAddress > EEPROM_SIZE){
 b58:	81 15       	cp	r24, r1
 b5a:	24 e0       	ldi	r18, 0x04	; 4
 b5c:	92 07       	cpc	r25, r18
 b5e:	e8 f4       	brcc	.+58     	; 0xb9a <EEPROM_update+0x52>
 b60:	f6 2e       	mov	r15, r22
 b62:	8c 01       	movw	r16, r24
		return EEPROM_INVALID_ADDR;
	}
	uint8_t value = 0;
 b64:	19 82       	std	Y+1, r1	; 0x01
	
	err = EEPROM_read(uiAddress,&value);
 b66:	be 01       	movw	r22, r28
 b68:	6f 5f       	subi	r22, 0xFF	; 255
 b6a:	7f 4f       	sbci	r23, 0xFF	; 255
 b6c:	dc d0       	rcall	.+440    	; 0xd26 <EEPROM_read>
	if(err != EEPROM_OK){
 b6e:	81 11       	cpse	r24, r1
 b70:	19 c0       	rjmp	.+50     	; 0xba4 <EEPROM_update+0x5c>
		return err;
	}
	if(value == ucData){
 b72:	89 81       	ldd	r24, Y+1	; 0x01
 b74:	8f 15       	cp	r24, r15
 b76:	99 f0       	breq	.+38     	; 0xb9e <EEPROM_update+0x56>
		return EEPROM_OK;
	}
	
	err = EEPROM_write(uiAddress,ucData);
 b78:	6f 2d       	mov	r22, r15
 b7a:	c8 01       	movw	r24, r16
 b7c:	be d0       	rcall	.+380    	; 0xcfa <EEPROM_write>
	if(err != EEPROM_OK){
 b7e:	81 11       	cpse	r24, r1
 b80:	11 c0       	rjmp	.+34     	; 0xba4 <EEPROM_update+0x5c>
		return err;
	}
	
	err = EEPROM_read(uiAddress,&value);
 b82:	be 01       	movw	r22, r28
 b84:	6f 5f       	subi	r22, 0xFF	; 255
 b86:	7f 4f       	sbci	r23, 0xFF	; 255
 b88:	c8 01       	movw	r24, r16
 b8a:	cd d0       	rcall	.+410    	; 0xd26 <EEPROM_read>
	if(err != EEPROM_OK){
 b8c:	81 11       	cpse	r24, r1
 b8e:	0a c0       	rjmp	.+20     	; 0xba4 <EEPROM_update+0x5c>
		return err;
	}
	if(value != ucData){
 b90:	89 81       	ldd	r24, Y+1	; 0x01
 b92:	f8 16       	cp	r15, r24
 b94:	31 f0       	breq	.+12     	; 0xba2 <EEPROM_update+0x5a>
		return EEPROM_WRITE_FAIL;
 b96:	81 e0       	ldi	r24, 0x01	; 1
 b98:	05 c0       	rjmp	.+10     	; 0xba4 <EEPROM_update+0x5c>
}

uint8_t EEPROM_update(uint16_t uiAddress, uint8_t ucData){
	uint8_t err = EEPROM_OK;
	if(uiAddress > EEPROM_SIZE){
		return EEPROM_INVALID_ADDR;
 b9a:	82 e0       	ldi	r24, 0x02	; 2
 b9c:	03 c0       	rjmp	.+6      	; 0xba4 <EEPROM_update+0x5c>
	err = EEPROM_read(uiAddress,&value);
	if(err != EEPROM_OK){
		return err;
	}
	if(value == ucData){
		return EEPROM_OK;
 b9e:	80 e0       	ldi	r24, 0x00	; 0
 ba0:	01 c0       	rjmp	.+2      	; 0xba4 <EEPROM_update+0x5c>
	}
	if(value != ucData){
		return EEPROM_WRITE_FAIL;
	}
	
	return EEPROM_OK;
 ba2:	80 e0       	ldi	r24, 0x00	; 0
	
}
 ba4:	0f 90       	pop	r0
 ba6:	df 91       	pop	r29
 ba8:	cf 91       	pop	r28
 baa:	1f 91       	pop	r17
 bac:	0f 91       	pop	r16
 bae:	ff 90       	pop	r15
 bb0:	08 95       	ret

Disassembly of section .text.timerCBK:

00000a4e <timerCBK>:
    }
}

void timerCBK(void)
{
	if(ovfs < ONE_SEC_OVS)
 a4e:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <ovfs>
 a52:	8a 37       	cpi	r24, 0x7A	; 122
 a54:	30 f4       	brcc	.+12     	; 0xa62 <timerCBK+0x14>
		ovfs++;
 a56:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <ovfs>
 a5a:	8f 5f       	subi	r24, 0xFF	; 255
 a5c:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <ovfs>
 a60:	08 95       	ret
	else
	{
		ovfs = 0;
 a62:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <ovfs>
		if(seconds > 0)
 a66:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <seconds>
 a6a:	88 23       	and	r24, r24
 a6c:	31 f0       	breq	.+12     	; 0xa7a <timerCBK+0x2c>
		{
			seconds--;
 a6e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <seconds>
 a72:	81 50       	subi	r24, 0x01	; 1
 a74:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <seconds>
 a78:	08 95       	ret
		}
		else
		{
			if(minutes > 0)
 a7a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <minutes>
 a7e:	88 23       	and	r24, r24
 a80:	49 f0       	breq	.+18     	; 0xa94 <timerCBK+0x46>
			{
				minutes--;
 a82:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <minutes>
 a86:	81 50       	subi	r24, 0x01	; 1
 a88:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <minutes>
				seconds = 59;
 a8c:	8b e3       	ldi	r24, 0x3B	; 59
 a8e:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <seconds>
 a92:	08 95       	ret
			}
			else
			{
				/* timer expired */
				systemState = STOP;
 a94:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <systemState>
				/* Disengage relay */
				DIO_Write(RELAY_GPIO, RELAY_PIN, LOW);
 a98:	40 e0       	ldi	r20, 0x00	; 0
 a9a:	66 e0       	ldi	r22, 0x06	; 6
 a9c:	83 e0       	ldi	r24, 0x03	; 3
 a9e:	24 df       	rcall	.-440    	; 0x8e8 <DIO_Write>
				/* Turn off LED */
				DIO_Write(LED_GPIO, LED_PIN, LOW);
 aa0:	40 e0       	ldi	r20, 0x00	; 0
 aa2:	67 e0       	ldi	r22, 0x07	; 7
 aa4:	83 e0       	ldi	r24, 0x03	; 3
 aa6:	20 df       	rcall	.-448    	; 0x8e8 <DIO_Write>
				minutes = storedMinutes;
 aa8:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <storedMinutes>
 aac:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <minutes>
				seconds = storedSeconds;
 ab0:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <storedSeconds>
 ab4:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <seconds>
				Timer_Stop(TIMER_CH0);
 ab8:	80 e0       	ldi	r24, 0x00	; 0
 aba:	7b d0       	rcall	.+246    	; 0xbb2 <Timer_Stop>
				/* Store timer value into EEPROM */
				EEPROM_update(MINUTE_EE_ADDR, minutes);
 abc:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <minutes>
 ac0:	80 e0       	ldi	r24, 0x00	; 0
 ac2:	90 e0       	ldi	r25, 0x00	; 0
 ac4:	41 d0       	rcall	.+130    	; 0xb48 <EEPROM_update>
				EEPROM_update(SECOND_EE_ADDR, seconds);
 ac6:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <seconds>
 aca:	81 e0       	ldi	r24, 0x01	; 1
 acc:	90 e0       	ldi	r25, 0x00	; 0
 ace:	3c d0       	rcall	.+120    	; 0xb48 <EEPROM_update>
 ad0:	08 95       	ret

Disassembly of section .text.isBTN_Pressed:

000005a2 <isBTN_Pressed>:
		
	}
}

uint8_t isBTN_Pressed(BTN_t btn)
{
 5a2:	cf 93       	push	r28
 5a4:	df 93       	push	r29
 5a6:	0f 92       	push	r0
 5a8:	cd b7       	in	r28, 0x3d	; 61
 5aa:	de b7       	in	r29, 0x3e	; 62
	uint8_t btnState = HIGH;
 5ac:	91 e0       	ldi	r25, 0x01	; 1
 5ae:	99 83       	std	Y+1, r25	; 0x01
	switch(btn)
 5b0:	81 30       	cpi	r24, 0x01	; 1
 5b2:	09 f1       	breq	.+66     	; 0x5f6 <isBTN_Pressed+0x54>
 5b4:	18 f0       	brcs	.+6      	; 0x5bc <isBTN_Pressed+0x1a>
 5b6:	82 30       	cpi	r24, 0x02	; 2
 5b8:	d9 f1       	breq	.+118    	; 0x630 <isBTN_Pressed+0x8e>
 5ba:	57 c0       	rjmp	.+174    	; 0x66a <isBTN_Pressed+0xc8>
	{
	case OK_BTN:
		DIO_Read(OK_BTN_GPIO, OK_BTN_PIN, &btnState);
 5bc:	ae 01       	movw	r20, r28
 5be:	4f 5f       	subi	r20, 0xFF	; 255
 5c0:	5f 4f       	sbci	r21, 0xFF	; 255
 5c2:	61 e0       	ldi	r22, 0x01	; 1
 5c4:	81 e0       	ldi	r24, 0x01	; 1
 5c6:	85 d2       	rcall	.+1290   	; 0xad2 <DIO_Read>
		if(btnState == LOW)
 5c8:	89 81       	ldd	r24, Y+1	; 0x01
 5ca:	81 11       	cpse	r24, r1
 5cc:	50 c0       	rjmp	.+160    	; 0x66e <isBTN_Pressed+0xcc>
		{
			if(OK_BTN_ConfidenceLow < BTN_CONFIDENCE_PRESSED)
 5ce:	20 91 73 00 	lds	r18, 0x0073	; 0x800073 <OK_BTN_ConfidenceLow>
 5d2:	30 91 74 00 	lds	r19, 0x0074	; 0x800074 <OK_BTN_ConfidenceLow+0x1>
 5d6:	2a 30       	cpi	r18, 0x0A	; 10
 5d8:	31 05       	cpc	r19, r1
 5da:	38 f4       	brcc	.+14     	; 0x5ea <isBTN_Pressed+0x48>
				OK_BTN_ConfidenceLow++;
 5dc:	2f 5f       	subi	r18, 0xFF	; 255
 5de:	3f 4f       	sbci	r19, 0xFF	; 255
 5e0:	30 93 74 00 	sts	0x0074, r19	; 0x800074 <OK_BTN_ConfidenceLow+0x1>
 5e4:	20 93 73 00 	sts	0x0073, r18	; 0x800073 <OK_BTN_ConfidenceLow>
 5e8:	47 c0       	rjmp	.+142    	; 0x678 <isBTN_Pressed+0xd6>
			else
			{
				OK_BTN_ConfidenceLow = 0;
 5ea:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <OK_BTN_ConfidenceLow+0x1>
 5ee:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <OK_BTN_ConfidenceLow>
				return HIGH;
 5f2:	81 e0       	ldi	r24, 0x01	; 1
 5f4:	41 c0       	rjmp	.+130    	; 0x678 <isBTN_Pressed+0xd6>
		}
		else
			return LOW;
		break;
	case UP_BTN:
		DIO_Read(UP_BTN_GPIO, UP_BTN_PIN, &btnState);
 5f6:	ae 01       	movw	r20, r28
 5f8:	4f 5f       	subi	r20, 0xFF	; 255
 5fa:	5f 4f       	sbci	r21, 0xFF	; 255
 5fc:	62 e0       	ldi	r22, 0x02	; 2
 5fe:	81 e0       	ldi	r24, 0x01	; 1
 600:	68 d2       	rcall	.+1232   	; 0xad2 <DIO_Read>
		if(btnState == LOW)
 602:	89 81       	ldd	r24, Y+1	; 0x01
 604:	81 11       	cpse	r24, r1
 606:	35 c0       	rjmp	.+106    	; 0x672 <isBTN_Pressed+0xd0>
		{
			if(UP_BTN_ConfidenceLow < BTN_CONFIDENCE_PRESSED)
 608:	20 91 71 00 	lds	r18, 0x0071	; 0x800071 <UP_BTN_ConfidenceLow>
 60c:	30 91 72 00 	lds	r19, 0x0072	; 0x800072 <UP_BTN_ConfidenceLow+0x1>
 610:	2a 30       	cpi	r18, 0x0A	; 10
 612:	31 05       	cpc	r19, r1
 614:	38 f4       	brcc	.+14     	; 0x624 <isBTN_Pressed+0x82>
				UP_BTN_ConfidenceLow++;
 616:	2f 5f       	subi	r18, 0xFF	; 255
 618:	3f 4f       	sbci	r19, 0xFF	; 255
 61a:	30 93 72 00 	sts	0x0072, r19	; 0x800072 <UP_BTN_ConfidenceLow+0x1>
 61e:	20 93 71 00 	sts	0x0071, r18	; 0x800071 <UP_BTN_ConfidenceLow>
 622:	2a c0       	rjmp	.+84     	; 0x678 <isBTN_Pressed+0xd6>
			else
			{
				UP_BTN_ConfidenceLow = 0;
 624:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <UP_BTN_ConfidenceLow+0x1>
 628:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <UP_BTN_ConfidenceLow>
				return HIGH;
 62c:	81 e0       	ldi	r24, 0x01	; 1
 62e:	24 c0       	rjmp	.+72     	; 0x678 <isBTN_Pressed+0xd6>
		}
		else
			return LOW;
		break;
	case DN_BTN:
		DIO_Read(DN_BTN_GPIO, DN_BTN_PIN, &btnState);
 630:	ae 01       	movw	r20, r28
 632:	4f 5f       	subi	r20, 0xFF	; 255
 634:	5f 4f       	sbci	r21, 0xFF	; 255
 636:	60 e0       	ldi	r22, 0x00	; 0
 638:	81 e0       	ldi	r24, 0x01	; 1
 63a:	4b d2       	rcall	.+1174   	; 0xad2 <DIO_Read>
		if(btnState == LOW)
 63c:	89 81       	ldd	r24, Y+1	; 0x01
 63e:	81 11       	cpse	r24, r1
 640:	1a c0       	rjmp	.+52     	; 0x676 <isBTN_Pressed+0xd4>
		{
			if(DN_BTN_ConfidenceLow < BTN_CONFIDENCE_PRESSED)
 642:	20 91 6f 00 	lds	r18, 0x006F	; 0x80006f <DN_BTN_ConfidenceLow>
 646:	30 91 70 00 	lds	r19, 0x0070	; 0x800070 <DN_BTN_ConfidenceLow+0x1>
 64a:	2a 30       	cpi	r18, 0x0A	; 10
 64c:	31 05       	cpc	r19, r1
 64e:	38 f4       	brcc	.+14     	; 0x65e <isBTN_Pressed+0xbc>
				DN_BTN_ConfidenceLow++;
 650:	2f 5f       	subi	r18, 0xFF	; 255
 652:	3f 4f       	sbci	r19, 0xFF	; 255
 654:	30 93 70 00 	sts	0x0070, r19	; 0x800070 <DN_BTN_ConfidenceLow+0x1>
 658:	20 93 6f 00 	sts	0x006F, r18	; 0x80006f <DN_BTN_ConfidenceLow>
 65c:	0d c0       	rjmp	.+26     	; 0x678 <isBTN_Pressed+0xd6>
			else
			{
				DN_BTN_ConfidenceLow = 0;
 65e:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <DN_BTN_ConfidenceLow+0x1>
 662:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <DN_BTN_ConfidenceLow>
				return HIGH;
 666:	81 e0       	ldi	r24, 0x01	; 1
 668:	07 c0       	rjmp	.+14     	; 0x678 <isBTN_Pressed+0xd6>
		}
		else
			return LOW;
		break;
	default:
		return LOW;
 66a:	80 e0       	ldi	r24, 0x00	; 0
 66c:	05 c0       	rjmp	.+10     	; 0x678 <isBTN_Pressed+0xd6>
				OK_BTN_ConfidenceLow = 0;
				return HIGH;
			}
		}
		else
			return LOW;
 66e:	80 e0       	ldi	r24, 0x00	; 0
 670:	03 c0       	rjmp	.+6      	; 0x678 <isBTN_Pressed+0xd6>
				UP_BTN_ConfidenceLow = 0;
				return HIGH;
			}
		}
		else
			return LOW;
 672:	80 e0       	ldi	r24, 0x00	; 0
 674:	01 c0       	rjmp	.+2      	; 0x678 <isBTN_Pressed+0xd6>
				DN_BTN_ConfidenceLow = 0;
				return HIGH;
			}
		}
		else
			return LOW;
 676:	80 e0       	ldi	r24, 0x00	; 0
	default:
		return LOW;
		break;
	}
	return LOW;
}
 678:	0f 90       	pop	r0
 67a:	df 91       	pop	r29
 67c:	cf 91       	pop	r28
 67e:	08 95       	ret

Disassembly of section .text.segmentWrite:

0000099c <segmentWrite>:

void segmentWrite(uint8_t data)
{
 99c:	cf 93       	push	r28
	if(segArray[data] & 0x01)
 99e:	90 e0       	ldi	r25, 0x00	; 0
 9a0:	a0 e0       	ldi	r26, 0x00	; 0
 9a2:	8a 56       	subi	r24, 0x6A	; 106
 9a4:	9f 4f       	sbci	r25, 0xFF	; 255
 9a6:	af 4f       	sbci	r26, 0xFF	; 255
 9a8:	fc 01       	movw	r30, r24
 9aa:	c4 91       	lpm	r28, Z
 9ac:	a7 fd       	sbrc	r26, 7
 9ae:	c0 81       	ld	r28, Z
 9b0:	c0 ff       	sbrs	r28, 0
 9b2:	05 c0       	rjmp	.+10     	; 0x9be <segmentWrite+0x22>
		DIO_Write(SEGMENT_A_GPIO, SEGMENT_A_PIN, HIGH);
 9b4:	41 e0       	ldi	r20, 0x01	; 1
 9b6:	65 e0       	ldi	r22, 0x05	; 5
 9b8:	82 e0       	ldi	r24, 0x02	; 2
 9ba:	96 df       	rcall	.-212    	; 0x8e8 <DIO_Write>
 9bc:	04 c0       	rjmp	.+8      	; 0x9c6 <segmentWrite+0x2a>
	else
		DIO_Write(SEGMENT_A_GPIO, SEGMENT_A_PIN, LOW);
 9be:	40 e0       	ldi	r20, 0x00	; 0
 9c0:	65 e0       	ldi	r22, 0x05	; 5
 9c2:	82 e0       	ldi	r24, 0x02	; 2
 9c4:	91 df       	rcall	.-222    	; 0x8e8 <DIO_Write>
		
	if(segArray[data] & 0x02)
 9c6:	c1 ff       	sbrs	r28, 1
 9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <segmentWrite+0x38>
		DIO_Write(SEGMENT_B_GPIO, SEGMENT_B_PIN, HIGH);
 9ca:	41 e0       	ldi	r20, 0x01	; 1
 9cc:	62 e0       	ldi	r22, 0x02	; 2
 9ce:	82 e0       	ldi	r24, 0x02	; 2
 9d0:	8b df       	rcall	.-234    	; 0x8e8 <DIO_Write>
 9d2:	04 c0       	rjmp	.+8      	; 0x9dc <segmentWrite+0x40>
	else
		DIO_Write(SEGMENT_B_GPIO, SEGMENT_B_PIN, LOW);
 9d4:	40 e0       	ldi	r20, 0x00	; 0
 9d6:	62 e0       	ldi	r22, 0x02	; 2
 9d8:	82 e0       	ldi	r24, 0x02	; 2
 9da:	86 df       	rcall	.-244    	; 0x8e8 <DIO_Write>
		
	if(segArray[data] & 0x04)
 9dc:	c2 ff       	sbrs	r28, 2
 9de:	05 c0       	rjmp	.+10     	; 0x9ea <segmentWrite+0x4e>
		DIO_Write(SEGMENT_C_GPIO, SEGMENT_C_PIN, HIGH);
 9e0:	41 e0       	ldi	r20, 0x01	; 1
 9e2:	62 e0       	ldi	r22, 0x02	; 2
 9e4:	83 e0       	ldi	r24, 0x03	; 3
 9e6:	80 df       	rcall	.-256    	; 0x8e8 <DIO_Write>
 9e8:	04 c0       	rjmp	.+8      	; 0x9f2 <segmentWrite+0x56>
	else
		DIO_Write(SEGMENT_C_GPIO, SEGMENT_C_PIN, LOW);
 9ea:	40 e0       	ldi	r20, 0x00	; 0
 9ec:	62 e0       	ldi	r22, 0x02	; 2
 9ee:	83 e0       	ldi	r24, 0x03	; 3
 9f0:	7b df       	rcall	.-266    	; 0x8e8 <DIO_Write>
		
	if(segArray[data] & 0x08)
 9f2:	c3 ff       	sbrs	r28, 3
 9f4:	05 c0       	rjmp	.+10     	; 0xa00 <segmentWrite+0x64>
		DIO_Write(SEGMENT_D_GPIO, SEGMENT_D_PIN, HIGH);
 9f6:	41 e0       	ldi	r20, 0x01	; 1
 9f8:	64 e0       	ldi	r22, 0x04	; 4
 9fa:	83 e0       	ldi	r24, 0x03	; 3
 9fc:	75 df       	rcall	.-278    	; 0x8e8 <DIO_Write>
 9fe:	04 c0       	rjmp	.+8      	; 0xa08 <segmentWrite+0x6c>
	else
		DIO_Write(SEGMENT_D_GPIO, SEGMENT_D_PIN, LOW);
 a00:	40 e0       	ldi	r20, 0x00	; 0
 a02:	64 e0       	ldi	r22, 0x04	; 4
 a04:	83 e0       	ldi	r24, 0x03	; 3
 a06:	70 df       	rcall	.-288    	; 0x8e8 <DIO_Write>
		
	if(segArray[data] & 0x10)
 a08:	c4 ff       	sbrs	r28, 4
 a0a:	05 c0       	rjmp	.+10     	; 0xa16 <segmentWrite+0x7a>
		DIO_Write(SEGMENT_E_GPIO, SEGMENT_E_PIN, HIGH);
 a0c:	41 e0       	ldi	r20, 0x01	; 1
 a0e:	65 e0       	ldi	r22, 0x05	; 5
 a10:	83 e0       	ldi	r24, 0x03	; 3
 a12:	6a df       	rcall	.-300    	; 0x8e8 <DIO_Write>
 a14:	04 c0       	rjmp	.+8      	; 0xa1e <segmentWrite+0x82>
	else
		DIO_Write(SEGMENT_E_GPIO, SEGMENT_E_PIN, LOW);
 a16:	40 e0       	ldi	r20, 0x00	; 0
 a18:	65 e0       	ldi	r22, 0x05	; 5
 a1a:	83 e0       	ldi	r24, 0x03	; 3
 a1c:	65 df       	rcall	.-310    	; 0x8e8 <DIO_Write>
		
	if(segArray[data] & 0x20)
 a1e:	c5 ff       	sbrs	r28, 5
 a20:	05 c0       	rjmp	.+10     	; 0xa2c <segmentWrite+0x90>
		DIO_Write(SEGMENT_F_GPIO, SEGMENT_F_PIN, HIGH);
 a22:	41 e0       	ldi	r20, 0x01	; 1
 a24:	63 e0       	ldi	r22, 0x03	; 3
 a26:	82 e0       	ldi	r24, 0x02	; 2
 a28:	5f df       	rcall	.-322    	; 0x8e8 <DIO_Write>
 a2a:	04 c0       	rjmp	.+8      	; 0xa34 <segmentWrite+0x98>
	else
		DIO_Write(SEGMENT_F_GPIO, SEGMENT_F_PIN, LOW);
 a2c:	40 e0       	ldi	r20, 0x00	; 0
 a2e:	63 e0       	ldi	r22, 0x03	; 3
 a30:	82 e0       	ldi	r24, 0x02	; 2
 a32:	5a df       	rcall	.-332    	; 0x8e8 <DIO_Write>
		
	if(segArray[data] & 0x40)
 a34:	c6 ff       	sbrs	r28, 6
 a36:	05 c0       	rjmp	.+10     	; 0xa42 <segmentWrite+0xa6>
		DIO_Write(SEGMENT_G_GPIO, SEGMENT_G_PIN, HIGH);
 a38:	41 e0       	ldi	r20, 0x01	; 1
 a3a:	61 e0       	ldi	r22, 0x01	; 1
 a3c:	83 e0       	ldi	r24, 0x03	; 3
 a3e:	54 df       	rcall	.-344    	; 0x8e8 <DIO_Write>
 a40:	04 c0       	rjmp	.+8      	; 0xa4a <segmentWrite+0xae>
	else
		DIO_Write(SEGMENT_G_GPIO, SEGMENT_G_PIN, LOW);
 a42:	40 e0       	ldi	r20, 0x00	; 0
 a44:	61 e0       	ldi	r22, 0x01	; 1
 a46:	83 e0       	ldi	r24, 0x03	; 3
 a48:	4f df       	rcall	.-354    	; 0x8e8 <DIO_Write>
}
 a4a:	cf 91       	pop	r28
 a4c:	08 95       	ret

Disassembly of section .text.displayWrite:

0000044a <displayWrite>:

void displayWrite()
{
 44a:	cf 93       	push	r28
	/* Display minutes tens */
	segmentWrite((uint8_t)((minutes / 10) % 10));
 44c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <minutes>
 450:	cd ec       	ldi	r28, 0xCD	; 205
 452:	8c 9f       	mul	r24, r28
 454:	81 2d       	mov	r24, r1
 456:	11 24       	eor	r1, r1
 458:	86 95       	lsr	r24
 45a:	86 95       	lsr	r24
 45c:	86 95       	lsr	r24
 45e:	8c 9f       	mul	r24, r28
 460:	91 2d       	mov	r25, r1
 462:	11 24       	eor	r1, r1
 464:	96 95       	lsr	r25
 466:	96 95       	lsr	r25
 468:	96 95       	lsr	r25
 46a:	99 0f       	add	r25, r25
 46c:	29 2f       	mov	r18, r25
 46e:	22 0f       	add	r18, r18
 470:	22 0f       	add	r18, r18
 472:	92 0f       	add	r25, r18
 474:	89 1b       	sub	r24, r25
 476:	92 d2       	rcall	.+1316   	; 0x99c <segmentWrite>
	DIO_Write(DISPLAY_1_GPIO, DISPLAY_1_PIN, LOW);
 478:	40 e0       	ldi	r20, 0x00	; 0
 47a:	60 e0       	ldi	r22, 0x00	; 0
 47c:	83 e0       	ldi	r24, 0x03	; 3
 47e:	34 d2       	rcall	.+1128   	; 0x8e8 <DIO_Write>
	DIO_Write(DISPLAY_2_GPIO, DISPLAY_2_PIN, HIGH);
 480:	41 e0       	ldi	r20, 0x01	; 1
 482:	64 e0       	ldi	r22, 0x04	; 4
 484:	82 e0       	ldi	r24, 0x02	; 2
 486:	30 d2       	rcall	.+1120   	; 0x8e8 <DIO_Write>
	DIO_Write(DISPLAY_3_GPIO, DISPLAY_3_PIN, HIGH);
 488:	41 e0       	ldi	r20, 0x01	; 1
 48a:	61 e0       	ldi	r22, 0x01	; 1
 48c:	82 e0       	ldi	r24, 0x02	; 2
 48e:	2c d2       	rcall	.+1112   	; 0x8e8 <DIO_Write>
	DIO_Write(DISPLAY_4_GPIO, DISPLAY_4_PIN, HIGH);
 490:	41 e0       	ldi	r20, 0x01	; 1
 492:	60 e0       	ldi	r22, 0x00	; 0
 494:	82 e0       	ldi	r24, 0x02	; 2
 496:	28 d2       	rcall	.+1104   	; 0x8e8 <DIO_Write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 498:	8f e6       	ldi	r24, 0x6F	; 111
 49a:	97 e1       	ldi	r25, 0x17	; 23
 49c:	01 97       	sbiw	r24, 0x01	; 1
 49e:	f1 f7       	brne	.-4      	; 0x49c <__stack+0x3d>
 4a0:	00 c0       	rjmp	.+0      	; 0x4a2 <__stack+0x43>
 4a2:	00 00       	nop
	_delay_ms(3);
	
	/* Display minutes ones */
	segmentWrite((uint8_t)(minutes % 10));
 4a4:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <minutes>
 4a8:	8c 9f       	mul	r24, r28
 4aa:	91 2d       	mov	r25, r1
 4ac:	11 24       	eor	r1, r1
 4ae:	96 95       	lsr	r25
 4b0:	96 95       	lsr	r25
 4b2:	96 95       	lsr	r25
 4b4:	99 0f       	add	r25, r25
 4b6:	29 2f       	mov	r18, r25
 4b8:	22 0f       	add	r18, r18
 4ba:	22 0f       	add	r18, r18
 4bc:	92 0f       	add	r25, r18
 4be:	89 1b       	sub	r24, r25
 4c0:	6d d2       	rcall	.+1242   	; 0x99c <segmentWrite>
	DIO_Write(SEGMENT_DP_GPIO, SEGMENT_DP_PIN, LOW);
 4c2:	40 e0       	ldi	r20, 0x00	; 0
 4c4:	63 e0       	ldi	r22, 0x03	; 3
 4c6:	83 e0       	ldi	r24, 0x03	; 3
 4c8:	0f d2       	rcall	.+1054   	; 0x8e8 <DIO_Write>
	DIO_Write(DISPLAY_1_GPIO, DISPLAY_1_PIN, HIGH);
 4ca:	41 e0       	ldi	r20, 0x01	; 1
 4cc:	60 e0       	ldi	r22, 0x00	; 0
 4ce:	83 e0       	ldi	r24, 0x03	; 3
 4d0:	0b d2       	rcall	.+1046   	; 0x8e8 <DIO_Write>
	DIO_Write(DISPLAY_2_GPIO, DISPLAY_2_PIN, LOW);
 4d2:	40 e0       	ldi	r20, 0x00	; 0
 4d4:	64 e0       	ldi	r22, 0x04	; 4
 4d6:	82 e0       	ldi	r24, 0x02	; 2
 4d8:	07 d2       	rcall	.+1038   	; 0x8e8 <DIO_Write>
	DIO_Write(DISPLAY_3_GPIO, DISPLAY_3_PIN, HIGH);
 4da:	41 e0       	ldi	r20, 0x01	; 1
 4dc:	61 e0       	ldi	r22, 0x01	; 1
 4de:	82 e0       	ldi	r24, 0x02	; 2
 4e0:	03 d2       	rcall	.+1030   	; 0x8e8 <DIO_Write>
	DIO_Write(DISPLAY_4_GPIO, DISPLAY_4_PIN, HIGH);
 4e2:	41 e0       	ldi	r20, 0x01	; 1
 4e4:	60 e0       	ldi	r22, 0x00	; 0
 4e6:	82 e0       	ldi	r24, 0x02	; 2
 4e8:	ff d1       	rcall	.+1022   	; 0x8e8 <DIO_Write>
 4ea:	8f e6       	ldi	r24, 0x6F	; 111
 4ec:	97 e1       	ldi	r25, 0x17	; 23
 4ee:	01 97       	sbiw	r24, 0x01	; 1
 4f0:	f1 f7       	brne	.-4      	; 0x4ee <__stack+0x8f>
 4f2:	00 c0       	rjmp	.+0      	; 0x4f4 <__stack+0x95>
 4f4:	00 00       	nop
	_delay_ms(3);
	
	/* Display seconds tens */
	segmentWrite((uint8_t)((seconds / 10) % 10));
 4f6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <seconds>
 4fa:	8c 9f       	mul	r24, r28
 4fc:	81 2d       	mov	r24, r1
 4fe:	11 24       	eor	r1, r1
 500:	86 95       	lsr	r24
 502:	86 95       	lsr	r24
 504:	86 95       	lsr	r24
 506:	8c 9f       	mul	r24, r28
 508:	91 2d       	mov	r25, r1
 50a:	11 24       	eor	r1, r1
 50c:	96 95       	lsr	r25
 50e:	96 95       	lsr	r25
 510:	96 95       	lsr	r25
 512:	99 0f       	add	r25, r25
 514:	29 2f       	mov	r18, r25
 516:	22 0f       	add	r18, r18
 518:	22 0f       	add	r18, r18
 51a:	92 0f       	add	r25, r18
 51c:	89 1b       	sub	r24, r25
 51e:	3e d2       	rcall	.+1148   	; 0x99c <segmentWrite>
	DIO_Write(SEGMENT_DP_GPIO, SEGMENT_DP_PIN, HIGH);
 520:	41 e0       	ldi	r20, 0x01	; 1
 522:	63 e0       	ldi	r22, 0x03	; 3
 524:	83 e0       	ldi	r24, 0x03	; 3
 526:	e0 d1       	rcall	.+960    	; 0x8e8 <DIO_Write>
	DIO_Write(DISPLAY_1_GPIO, DISPLAY_1_PIN, HIGH);
 528:	41 e0       	ldi	r20, 0x01	; 1
 52a:	60 e0       	ldi	r22, 0x00	; 0
 52c:	83 e0       	ldi	r24, 0x03	; 3
 52e:	dc d1       	rcall	.+952    	; 0x8e8 <DIO_Write>
	DIO_Write(DISPLAY_2_GPIO, DISPLAY_2_PIN, HIGH);
 530:	41 e0       	ldi	r20, 0x01	; 1
 532:	64 e0       	ldi	r22, 0x04	; 4
 534:	82 e0       	ldi	r24, 0x02	; 2
 536:	d8 d1       	rcall	.+944    	; 0x8e8 <DIO_Write>
	DIO_Write(DISPLAY_3_GPIO, DISPLAY_3_PIN, LOW);
 538:	40 e0       	ldi	r20, 0x00	; 0
 53a:	61 e0       	ldi	r22, 0x01	; 1
 53c:	82 e0       	ldi	r24, 0x02	; 2
 53e:	d4 d1       	rcall	.+936    	; 0x8e8 <DIO_Write>
	DIO_Write(DISPLAY_4_GPIO, DISPLAY_4_PIN, HIGH);
 540:	41 e0       	ldi	r20, 0x01	; 1
 542:	60 e0       	ldi	r22, 0x00	; 0
 544:	82 e0       	ldi	r24, 0x02	; 2
 546:	d0 d1       	rcall	.+928    	; 0x8e8 <DIO_Write>
 548:	8f e6       	ldi	r24, 0x6F	; 111
 54a:	97 e1       	ldi	r25, 0x17	; 23
 54c:	01 97       	sbiw	r24, 0x01	; 1
 54e:	f1 f7       	brne	.-4      	; 0x54c <__stack+0xed>
 550:	00 c0       	rjmp	.+0      	; 0x552 <__stack+0xf3>
 552:	00 00       	nop
	_delay_ms(3);
	
	/* Display seconds ones */
	segmentWrite((uint8_t)(seconds % 10));
 554:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <seconds>
 558:	8c 9f       	mul	r24, r28
 55a:	c1 2d       	mov	r28, r1
 55c:	11 24       	eor	r1, r1
 55e:	c6 95       	lsr	r28
 560:	c6 95       	lsr	r28
 562:	c6 95       	lsr	r28
 564:	cc 0f       	add	r28, r28
 566:	9c 2f       	mov	r25, r28
 568:	99 0f       	add	r25, r25
 56a:	99 0f       	add	r25, r25
 56c:	c9 0f       	add	r28, r25
 56e:	8c 1b       	sub	r24, r28
 570:	15 d2       	rcall	.+1066   	; 0x99c <segmentWrite>
	DIO_Write(DISPLAY_1_GPIO, DISPLAY_1_PIN, HIGH);
 572:	41 e0       	ldi	r20, 0x01	; 1
 574:	60 e0       	ldi	r22, 0x00	; 0
 576:	83 e0       	ldi	r24, 0x03	; 3
 578:	b7 d1       	rcall	.+878    	; 0x8e8 <DIO_Write>
	DIO_Write(DISPLAY_2_GPIO, DISPLAY_2_PIN, HIGH);
 57a:	41 e0       	ldi	r20, 0x01	; 1
 57c:	64 e0       	ldi	r22, 0x04	; 4
 57e:	82 e0       	ldi	r24, 0x02	; 2
 580:	b3 d1       	rcall	.+870    	; 0x8e8 <DIO_Write>
	DIO_Write(DISPLAY_3_GPIO, DISPLAY_3_PIN, HIGH);
 582:	41 e0       	ldi	r20, 0x01	; 1
 584:	61 e0       	ldi	r22, 0x01	; 1
 586:	82 e0       	ldi	r24, 0x02	; 2
 588:	af d1       	rcall	.+862    	; 0x8e8 <DIO_Write>
	DIO_Write(DISPLAY_4_GPIO, DISPLAY_4_PIN, LOW);
 58a:	40 e0       	ldi	r20, 0x00	; 0
 58c:	60 e0       	ldi	r22, 0x00	; 0
 58e:	82 e0       	ldi	r24, 0x02	; 2
 590:	ab d1       	rcall	.+854    	; 0x8e8 <DIO_Write>
 592:	8f e6       	ldi	r24, 0x6F	; 111
 594:	97 e1       	ldi	r25, 0x17	; 23
 596:	01 97       	sbiw	r24, 0x01	; 1
 598:	f1 f7       	brne	.-4      	; 0x596 <__stack+0x137>
 59a:	00 c0       	rjmp	.+0      	; 0x59c <__stack+0x13d>
 59c:	00 00       	nop
	_delay_ms(3);
	
}
 59e:	cf 91       	pop	r28
 5a0:	08 95       	ret

Disassembly of section .text.systemInit:

000002d6 <systemInit>:

void systemInit(void)
{
 2d6:	bf 92       	push	r11
 2d8:	cf 92       	push	r12
 2da:	df 92       	push	r13
 2dc:	ef 92       	push	r14
 2de:	ff 92       	push	r15
 2e0:	0f 93       	push	r16
 2e2:	1f 93       	push	r17
 2e4:	cf 93       	push	r28
 2e6:	df 93       	push	r29
 2e8:	cd b7       	in	r28, 0x3d	; 61
 2ea:	de b7       	in	r29, 0x3e	; 62
 2ec:	29 97       	sbiw	r28, 0x09	; 9
 2ee:	0f b6       	in	r0, 0x3f	; 63
 2f0:	f8 94       	cli
 2f2:	de bf       	out	0x3e, r29	; 62
 2f4:	0f be       	out	0x3f, r0	; 63
 2f6:	cd bf       	out	0x3d, r28	; 61
	/* Init GPIOs */
	
	/* Init LED */
	DIO_Cfg_s dioStr = {0};
	dioStr.GPIO = LED_GPIO;
 2f8:	03 e0       	ldi	r16, 0x03	; 3
 2fa:	09 83       	std	Y+1, r16	; 0x01
	dioStr.dir = OUTPUT;
 2fc:	1f ef       	ldi	r17, 0xFF	; 255
 2fe:	1b 83       	std	Y+3, r17	; 0x03
	dioStr.pins = LED_PIN;
 300:	87 e0       	ldi	r24, 0x07	; 7
 302:	8a 83       	std	Y+2, r24	; 0x02
	DIO_init(&dioStr);
 304:	ce 01       	movw	r24, r28
 306:	01 96       	adiw	r24, 0x01	; 1
 308:	29 d2       	rcall	.+1106   	; 0x75c <DIO_init>
	
	/* Init Relay */
	dioStr.GPIO = RELAY_GPIO;
 30a:	09 83       	std	Y+1, r16	; 0x01
	dioStr.dir = OUTPUT;
 30c:	1b 83       	std	Y+3, r17	; 0x03
	dioStr.pins = RELAY_PIN;
 30e:	0f 2e       	mov	r0, r31
 310:	f6 e0       	ldi	r31, 0x06	; 6
 312:	df 2e       	mov	r13, r31
 314:	f0 2d       	mov	r31, r0
 316:	da 82       	std	Y+2, r13	; 0x02
	DIO_init(&dioStr);
 318:	ce 01       	movw	r24, r28
 31a:	01 96       	adiw	r24, 0x01	; 1
 31c:	1f d2       	rcall	.+1086   	; 0x75c <DIO_init>
	
	/* Init BTNs */
	dioStr.GPIO = OK_BTN_GPIO;
 31e:	ee 24       	eor	r14, r14
 320:	e3 94       	inc	r14
 322:	e9 82       	std	Y+1, r14	; 0x01
	dioStr.dir = INPUT;
 324:	1b 82       	std	Y+3, r1	; 0x03
	dioStr.pins = OK_BTN_PIN;
 326:	ea 82       	std	Y+2, r14	; 0x02
	DIO_init(&dioStr);
 328:	ce 01       	movw	r24, r28
 32a:	01 96       	adiw	r24, 0x01	; 1
 32c:	17 d2       	rcall	.+1070   	; 0x75c <DIO_init>
	
	dioStr.GPIO = UP_BTN_GPIO;
 32e:	e9 82       	std	Y+1, r14	; 0x01
	dioStr.dir = INPUT;
 330:	1b 82       	std	Y+3, r1	; 0x03
	dioStr.pins = UP_BTN_PIN;
 332:	68 94       	set
 334:	ff 24       	eor	r15, r15
 336:	f1 f8       	bld	r15, 1
 338:	fa 82       	std	Y+2, r15	; 0x02
	DIO_init(&dioStr);
 33a:	ce 01       	movw	r24, r28
 33c:	01 96       	adiw	r24, 0x01	; 1
 33e:	0e d2       	rcall	.+1052   	; 0x75c <DIO_init>
	
	dioStr.GPIO = DN_BTN_GPIO;
 340:	e9 82       	std	Y+1, r14	; 0x01
	dioStr.dir = INPUT;
 342:	1b 82       	std	Y+3, r1	; 0x03
	dioStr.pins = DN_BTN_PIN;
 344:	1a 82       	std	Y+2, r1	; 0x02
	DIO_init(&dioStr);
 346:	ce 01       	movw	r24, r28
 348:	01 96       	adiw	r24, 0x01	; 1
 34a:	08 d2       	rcall	.+1040   	; 0x75c <DIO_init>
	
	/* Init 7-seg */
	dioStr.GPIO = SEGMENT_A_GPIO;
 34c:	f9 82       	std	Y+1, r15	; 0x01
	dioStr.dir = OUTPUT;
 34e:	1b 83       	std	Y+3, r17	; 0x03
	dioStr.pins = SEGMENT_A_PIN;
 350:	0f 2e       	mov	r0, r31
 352:	f5 e0       	ldi	r31, 0x05	; 5
 354:	bf 2e       	mov	r11, r31
 356:	f0 2d       	mov	r31, r0
 358:	ba 82       	std	Y+2, r11	; 0x02
	DIO_init(&dioStr);
 35a:	ce 01       	movw	r24, r28
 35c:	01 96       	adiw	r24, 0x01	; 1
 35e:	fe d1       	rcall	.+1020   	; 0x75c <DIO_init>
	
	dioStr.GPIO = SEGMENT_B_GPIO;
 360:	f9 82       	std	Y+1, r15	; 0x01
	dioStr.dir = OUTPUT;
 362:	1b 83       	std	Y+3, r17	; 0x03
	dioStr.pins = SEGMENT_B_PIN;
 364:	fa 82       	std	Y+2, r15	; 0x02
	DIO_init(&dioStr);
 366:	ce 01       	movw	r24, r28
 368:	01 96       	adiw	r24, 0x01	; 1
 36a:	f8 d1       	rcall	.+1008   	; 0x75c <DIO_init>
	
	dioStr.GPIO = SEGMENT_C_GPIO;
 36c:	09 83       	std	Y+1, r16	; 0x01
	dioStr.dir = OUTPUT;
 36e:	1b 83       	std	Y+3, r17	; 0x03
	dioStr.pins = SEGMENT_C_PIN;
 370:	fa 82       	std	Y+2, r15	; 0x02
	DIO_init(&dioStr);
 372:	ce 01       	movw	r24, r28
 374:	01 96       	adiw	r24, 0x01	; 1
 376:	f2 d1       	rcall	.+996    	; 0x75c <DIO_init>
	
	dioStr.GPIO = SEGMENT_D_GPIO;
 378:	09 83       	std	Y+1, r16	; 0x01
	dioStr.dir = OUTPUT;
 37a:	1b 83       	std	Y+3, r17	; 0x03
	dioStr.pins = SEGMENT_D_PIN;
 37c:	68 94       	set
 37e:	cc 24       	eor	r12, r12
 380:	c2 f8       	bld	r12, 2
 382:	ca 82       	std	Y+2, r12	; 0x02
	DIO_init(&dioStr);
 384:	ce 01       	movw	r24, r28
 386:	01 96       	adiw	r24, 0x01	; 1
 388:	e9 d1       	rcall	.+978    	; 0x75c <DIO_init>
	
	dioStr.GPIO = SEGMENT_E_GPIO;
 38a:	09 83       	std	Y+1, r16	; 0x01
	dioStr.dir = OUTPUT;
 38c:	1b 83       	std	Y+3, r17	; 0x03
	dioStr.pins = SEGMENT_E_PIN;
 38e:	ba 82       	std	Y+2, r11	; 0x02
	DIO_init(&dioStr);
 390:	ce 01       	movw	r24, r28
 392:	01 96       	adiw	r24, 0x01	; 1
 394:	e3 d1       	rcall	.+966    	; 0x75c <DIO_init>
	
	dioStr.GPIO = SEGMENT_F_GPIO;
 396:	f9 82       	std	Y+1, r15	; 0x01
	dioStr.dir = OUTPUT;
 398:	1b 83       	std	Y+3, r17	; 0x03
	dioStr.pins = SEGMENT_F_PIN;
 39a:	0a 83       	std	Y+2, r16	; 0x02
	DIO_init(&dioStr);
 39c:	ce 01       	movw	r24, r28
 39e:	01 96       	adiw	r24, 0x01	; 1
 3a0:	dd d1       	rcall	.+954    	; 0x75c <DIO_init>
	
	dioStr.GPIO = SEGMENT_G_GPIO;
 3a2:	09 83       	std	Y+1, r16	; 0x01
	dioStr.dir = OUTPUT;
 3a4:	1b 83       	std	Y+3, r17	; 0x03
	dioStr.pins = SEGMENT_G_PIN;
 3a6:	ea 82       	std	Y+2, r14	; 0x02
	DIO_init(&dioStr);
 3a8:	ce 01       	movw	r24, r28
 3aa:	01 96       	adiw	r24, 0x01	; 1
 3ac:	d7 d1       	rcall	.+942    	; 0x75c <DIO_init>
	
	dioStr.GPIO = SEGMENT_DP_GPIO;
 3ae:	09 83       	std	Y+1, r16	; 0x01
	dioStr.dir = OUTPUT;
 3b0:	1b 83       	std	Y+3, r17	; 0x03
	dioStr.pins = SEGMENT_DP_PIN;
 3b2:	0a 83       	std	Y+2, r16	; 0x02
	DIO_init(&dioStr);
 3b4:	ce 01       	movw	r24, r28
 3b6:	01 96       	adiw	r24, 0x01	; 1
 3b8:	d1 d1       	rcall	.+930    	; 0x75c <DIO_init>
	
	
	dioStr.GPIO = DISPLAY_1_GPIO;
 3ba:	09 83       	std	Y+1, r16	; 0x01
	dioStr.dir = OUTPUT;
 3bc:	1b 83       	std	Y+3, r17	; 0x03
	dioStr.pins = DISPLAY_1_PIN;
 3be:	1a 82       	std	Y+2, r1	; 0x02
	DIO_init(&dioStr);
 3c0:	ce 01       	movw	r24, r28
 3c2:	01 96       	adiw	r24, 0x01	; 1
 3c4:	cb d1       	rcall	.+918    	; 0x75c <DIO_init>
	
	dioStr.GPIO = DISPLAY_2_GPIO;
 3c6:	f9 82       	std	Y+1, r15	; 0x01
	dioStr.dir = OUTPUT;
 3c8:	1b 83       	std	Y+3, r17	; 0x03
	dioStr.pins = DISPLAY_2_PIN;
 3ca:	ca 82       	std	Y+2, r12	; 0x02
	DIO_init(&dioStr);
 3cc:	ce 01       	movw	r24, r28
 3ce:	01 96       	adiw	r24, 0x01	; 1
 3d0:	c5 d1       	rcall	.+906    	; 0x75c <DIO_init>
	
	dioStr.GPIO = DISPLAY_3_GPIO;
 3d2:	f9 82       	std	Y+1, r15	; 0x01
	dioStr.dir = OUTPUT;
 3d4:	1b 83       	std	Y+3, r17	; 0x03
	dioStr.pins = DISPLAY_3_PIN;
 3d6:	ea 82       	std	Y+2, r14	; 0x02
	DIO_init(&dioStr);
 3d8:	ce 01       	movw	r24, r28
 3da:	01 96       	adiw	r24, 0x01	; 1
 3dc:	bf d1       	rcall	.+894    	; 0x75c <DIO_init>
	
	dioStr.GPIO = DISPLAY_4_GPIO;
 3de:	f9 82       	std	Y+1, r15	; 0x01
	dioStr.dir = OUTPUT;
 3e0:	1b 83       	std	Y+3, r17	; 0x03
	dioStr.pins = DISPLAY_4_PIN;
 3e2:	1a 82       	std	Y+2, r1	; 0x02
	DIO_init(&dioStr);
 3e4:	ce 01       	movw	r24, r28
 3e6:	01 96       	adiw	r24, 0x01	; 1
 3e8:	b9 d1       	rcall	.+882    	; 0x75c <DIO_init>
	
	/* Init timer0 */
	Timer_cfg_s timer0 = {0};
 3ea:	ce 01       	movw	r24, r28
 3ec:	04 96       	adiw	r24, 0x04	; 4
 3ee:	fc 01       	movw	r30, r24
 3f0:	2d 2d       	mov	r18, r13
 3f2:	11 92       	st	Z+, r1
 3f4:	2a 95       	dec	r18
 3f6:	e9 f7       	brne	.-6      	; 0x3f2 <systemInit+0x11c>
	timer0.Timer_CH_NO = TIMER_CH0;
	timer0.Timer_Mode = TIMER_MODE;
	timer0.Timer_Polling_Or_Interrupt = TIMER_INTERRUPT_MODE;
 3f8:	ee 82       	std	Y+6, r14	; 0x06
	timer0.Timer_Prescaler = TIMER_PRESCALER_256;
 3fa:	df 82       	std	Y+7, r13	; 0x07
	timer0.CBK_Ptr = timerCBK;
 3fc:	27 e2       	ldi	r18, 0x27	; 39
 3fe:	35 e0       	ldi	r19, 0x05	; 5
 400:	39 87       	std	Y+9, r19	; 0x09
 402:	28 87       	std	Y+8, r18	; 0x08
	Timer_Init(&timer0);
 404:	3d d1       	rcall	.+634    	; 0x680 <Timer_Init>
	
	/* Retrieve timer value from EEPROM */
	EEPROM_read(MINUTE_EE_ADDR, &storedMinutes);
 406:	66 e7       	ldi	r22, 0x76	; 118
 408:	70 e0       	ldi	r23, 0x00	; 0
 40a:	80 e0       	ldi	r24, 0x00	; 0
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	8b d4       	rcall	.+2326   	; 0xd26 <EEPROM_read>
	EEPROM_read(SECOND_EE_ADDR, &storedSeconds);
 410:	65 e7       	ldi	r22, 0x75	; 117
 412:	70 e0       	ldi	r23, 0x00	; 0
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	86 d4       	rcall	.+2316   	; 0xd26 <EEPROM_read>
	minutes = storedMinutes;
 41a:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <storedMinutes>
 41e:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <minutes>
	seconds = storedSeconds;
 422:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <storedSeconds>
 426:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <seconds>
 42a:	29 96       	adiw	r28, 0x09	; 9
 42c:	0f b6       	in	r0, 0x3f	; 63
 42e:	f8 94       	cli
 430:	de bf       	out	0x3e, r29	; 62
 432:	0f be       	out	0x3f, r0	; 63
 434:	cd bf       	out	0x3d, r28	; 61
 436:	df 91       	pop	r29
 438:	cf 91       	pop	r28
 43a:	1f 91       	pop	r17
 43c:	0f 91       	pop	r16
 43e:	ff 90       	pop	r15
 440:	ef 90       	pop	r14
 442:	df 90       	pop	r13
 444:	cf 90       	pop	r12
 446:	bf 90       	pop	r11
 448:	08 95       	ret

Disassembly of section .text.main:

0000082c <main>:
uint8_t isBTN_Pressed(BTN_t btn);
void timerCBK(void);

int main(void)
{
	systemInit();
 82c:	54 dd       	rcall	.-1368   	; 0x2d6 <systemInit>
	sei();
 82e:	78 94       	sei
	
    while(1)
    {
		displayWrite();
 830:	0c de       	rcall	.-1000   	; 0x44a <displayWrite>
		switch(systemState)
 832:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <systemState>
 836:	81 11       	cpse	r24, r1
 838:	fb cf       	rjmp	.-10     	; 0x830 <main+0x4>
		{
		case STOP:
			if(isBTN_Pressed(UP_BTN) == HIGH)
 83a:	81 e0       	ldi	r24, 0x01	; 1
 83c:	b2 de       	rcall	.-668    	; 0x5a2 <isBTN_Pressed>
 83e:	81 30       	cpi	r24, 0x01	; 1
 840:	c1 f4       	brne	.+48     	; 0x872 <main+0x46>
			{
				if(seconds < 59)
 842:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <seconds>
 846:	8b 33       	cpi	r24, 0x3B	; 59
 848:	30 f4       	brcc	.+12     	; 0x856 <main+0x2a>
					seconds++;
 84a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <seconds>
 84e:	8f 5f       	subi	r24, 0xFF	; 255
 850:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <seconds>
 854:	0e c0       	rjmp	.+28     	; 0x872 <main+0x46>
				else
				{
					seconds = 0;
 856:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <seconds>
					if(minutes < 59)
 85a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <minutes>
 85e:	8b 33       	cpi	r24, 0x3B	; 59
 860:	30 f4       	brcc	.+12     	; 0x86e <main+0x42>
						minutes++;
 862:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <minutes>
 866:	8f 5f       	subi	r24, 0xFF	; 255
 868:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <minutes>
 86c:	02 c0       	rjmp	.+4      	; 0x872 <main+0x46>
					else
						minutes = 0;
 86e:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <minutes>
			}
			else
			{
				/* Do nothing */
			}
			if(isBTN_Pressed(DN_BTN) == HIGH)
 872:	82 e0       	ldi	r24, 0x02	; 2
 874:	96 de       	rcall	.-724    	; 0x5a2 <isBTN_Pressed>
 876:	81 30       	cpi	r24, 0x01	; 1
 878:	d1 f4       	brne	.+52     	; 0x8ae <main+0x82>
			{
				if(seconds > 0)
 87a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <seconds>
 87e:	88 23       	and	r24, r24
 880:	31 f0       	breq	.+12     	; 0x88e <main+0x62>
				seconds--;
 882:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <seconds>
 886:	81 50       	subi	r24, 0x01	; 1
 888:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <seconds>
 88c:	10 c0       	rjmp	.+32     	; 0x8ae <main+0x82>
				else
				{
					seconds = 59;
 88e:	8b e3       	ldi	r24, 0x3B	; 59
 890:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <seconds>
					if(minutes > 0)
 894:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <minutes>
 898:	88 23       	and	r24, r24
 89a:	31 f0       	breq	.+12     	; 0x8a8 <main+0x7c>
					minutes--;
 89c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <minutes>
 8a0:	81 50       	subi	r24, 0x01	; 1
 8a2:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <minutes>
 8a6:	03 c0       	rjmp	.+6      	; 0x8ae <main+0x82>
					else
					minutes = 59;
 8a8:	8b e3       	ldi	r24, 0x3B	; 59
 8aa:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <minutes>
			}
			else
			{
				/* Do nothing */
			}
			if(isBTN_Pressed(OK_BTN) == HIGH)
 8ae:	80 e0       	ldi	r24, 0x00	; 0
 8b0:	78 de       	rcall	.-784    	; 0x5a2 <isBTN_Pressed>
 8b2:	81 30       	cpi	r24, 0x01	; 1
 8b4:	09 f0       	breq	.+2      	; 0x8b8 <main+0x8c>
 8b6:	bc cf       	rjmp	.-136    	; 0x830 <main+0x4>
			{
				storedMinutes = minutes;
 8b8:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <minutes>
 8bc:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <storedMinutes>
				storedSeconds = seconds;
 8c0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <seconds>
 8c4:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <storedSeconds>
				/* Start timer */
				Timer_Start(TIMER_CH0, 0);
 8c8:	60 e0       	ldi	r22, 0x00	; 0
 8ca:	70 e0       	ldi	r23, 0x00	; 0
 8cc:	80 e0       	ldi	r24, 0x00	; 0
 8ce:	e8 db       	rcall	.-2096   	; 0xa0 <Timer_Start>
				/* Engage relay */
				DIO_Write(RELAY_GPIO, RELAY_PIN, HIGH);
 8d0:	41 e0       	ldi	r20, 0x01	; 1
 8d2:	66 e0       	ldi	r22, 0x06	; 6
 8d4:	83 e0       	ldi	r24, 0x03	; 3
 8d6:	08 d0       	rcall	.+16     	; 0x8e8 <DIO_Write>
				/* Turn on LED */
				DIO_Write(LED_GPIO, LED_PIN, HIGH);
 8d8:	41 e0       	ldi	r20, 0x01	; 1
 8da:	67 e0       	ldi	r22, 0x07	; 7
 8dc:	83 e0       	ldi	r24, 0x03	; 3
 8de:	04 d0       	rcall	.+8      	; 0x8e8 <DIO_Write>
				systemState = RUN;
 8e0:	81 e0       	ldi	r24, 0x01	; 1
 8e2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <systemState>
 8e6:	a4 cf       	rjmp	.-184    	; 0x830 <main+0x4>

Disassembly of section .text.Timer_Init:

00000680 <Timer_Init>:
	else
	{
		return E_NOK;
	}
	return E_OK;
}
 680:	fc 01       	movw	r30, r24
 682:	89 2b       	or	r24, r25
 684:	09 f4       	brne	.+2      	; 0x688 <Timer_Init+0x8>
 686:	64 c0       	rjmp	.+200    	; 0x750 <Timer_Init+0xd0>
 688:	a0 81       	ld	r26, Z
 68a:	b0 e0       	ldi	r27, 0x00	; 0
 68c:	83 81       	ldd	r24, Z+3	; 0x03
 68e:	a7 59       	subi	r26, 0x97	; 151
 690:	bf 4f       	sbci	r27, 0xFF	; 255
 692:	8c 93       	st	X, r24
 694:	84 81       	ldd	r24, Z+4	; 0x04
 696:	95 81       	ldd	r25, Z+5	; 0x05
 698:	00 97       	sbiw	r24, 0x00	; 0
 69a:	09 f4       	brne	.+2      	; 0x69e <Timer_Init+0x1e>
 69c:	5b c0       	rjmp	.+182    	; 0x754 <Timer_Init+0xd4>
 69e:	a0 81       	ld	r26, Z
 6a0:	b0 e0       	ldi	r27, 0x00	; 0
 6a2:	aa 0f       	add	r26, r26
 6a4:	bb 1f       	adc	r27, r27
 6a6:	a0 5a       	subi	r26, 0xA0	; 160
 6a8:	bf 4f       	sbci	r27, 0xFF	; 255
 6aa:	8d 93       	st	X+, r24
 6ac:	9c 93       	st	X, r25
 6ae:	81 81       	ldd	r24, Z+1	; 0x01
 6b0:	81 30       	cpi	r24, 0x01	; 1
 6b2:	d1 f1       	breq	.+116    	; 0x728 <Timer_Init+0xa8>
 6b4:	18 f0       	brcs	.+6      	; 0x6bc <Timer_Init+0x3c>
 6b6:	82 30       	cpi	r24, 0x02	; 2
 6b8:	f1 f1       	breq	.+124    	; 0x736 <Timer_Init+0xb6>
 6ba:	4e c0       	rjmp	.+156    	; 0x758 <Timer_Init+0xd8>
 6bc:	90 81       	ld	r25, Z
 6be:	91 30       	cpi	r25, 0x01	; 1
 6c0:	79 f0       	breq	.+30     	; 0x6e0 <Timer_Init+0x60>
 6c2:	18 f0       	brcs	.+6      	; 0x6ca <Timer_Init+0x4a>
 6c4:	92 30       	cpi	r25, 0x02	; 2
 6c6:	e9 f0       	breq	.+58     	; 0x702 <Timer_Init+0x82>
 6c8:	08 95       	ret
 6ca:	82 81       	ldd	r24, Z+2	; 0x02
 6cc:	81 30       	cpi	r24, 0x01	; 1
 6ce:	21 f4       	brne	.+8      	; 0x6d8 <Timer_Init+0x58>
 6d0:	89 b7       	in	r24, 0x39	; 57
 6d2:	81 60       	ori	r24, 0x01	; 1
 6d4:	89 bf       	out	0x39, r24	; 57
 6d6:	22 c0       	rjmp	.+68     	; 0x71c <Timer_Init+0x9c>
 6d8:	89 b7       	in	r24, 0x39	; 57
 6da:	8e 7f       	andi	r24, 0xFE	; 254
 6dc:	89 bf       	out	0x39, r24	; 57
 6de:	1e c0       	rjmp	.+60     	; 0x71c <Timer_Init+0x9c>
 6e0:	8f b5       	in	r24, 0x2f	; 47
 6e2:	8c 7f       	andi	r24, 0xFC	; 252
 6e4:	8f bd       	out	0x2f, r24	; 47
 6e6:	8e b5       	in	r24, 0x2e	; 46
 6e8:	87 7e       	andi	r24, 0xE7	; 231
 6ea:	8e bd       	out	0x2e, r24	; 46
 6ec:	82 81       	ldd	r24, Z+2	; 0x02
 6ee:	81 11       	cpse	r24, r1
 6f0:	04 c0       	rjmp	.+8      	; 0x6fa <Timer_Init+0x7a>
 6f2:	89 b7       	in	r24, 0x39	; 57
 6f4:	8b 7f       	andi	r24, 0xFB	; 251
 6f6:	89 bf       	out	0x39, r24	; 57
 6f8:	11 c0       	rjmp	.+34     	; 0x71c <Timer_Init+0x9c>
 6fa:	89 b7       	in	r24, 0x39	; 57
 6fc:	84 60       	ori	r24, 0x04	; 4
 6fe:	89 bf       	out	0x39, r24	; 57
 700:	0d c0       	rjmp	.+26     	; 0x71c <Timer_Init+0x9c>
 702:	85 b5       	in	r24, 0x25	; 37
 704:	87 7b       	andi	r24, 0xB7	; 183
 706:	85 bd       	out	0x25, r24	; 37
 708:	82 81       	ldd	r24, Z+2	; 0x02
 70a:	81 11       	cpse	r24, r1
 70c:	04 c0       	rjmp	.+8      	; 0x716 <Timer_Init+0x96>
 70e:	89 b7       	in	r24, 0x39	; 57
 710:	8f 7b       	andi	r24, 0xBF	; 191
 712:	89 bf       	out	0x39, r24	; 57
 714:	03 c0       	rjmp	.+6      	; 0x71c <Timer_Init+0x9c>
 716:	89 b7       	in	r24, 0x39	; 57
 718:	80 64       	ori	r24, 0x40	; 64
 71a:	89 bf       	out	0x39, r24	; 57
 71c:	a0 81       	ld	r26, Z
 71e:	b0 e0       	ldi	r27, 0x00	; 0
 720:	a4 59       	subi	r26, 0x94	; 148
 722:	bf 4f       	sbci	r27, 0xFF	; 255
 724:	1c 92       	st	X, r1
 726:	0d c0       	rjmp	.+26     	; 0x742 <Timer_Init+0xc2>
 728:	a0 81       	ld	r26, Z
 72a:	b0 e0       	ldi	r27, 0x00	; 0
 72c:	a4 59       	subi	r26, 0x94	; 148
 72e:	bf 4f       	sbci	r27, 0xFF	; 255
 730:	81 e0       	ldi	r24, 0x01	; 1
 732:	8c 93       	st	X, r24
 734:	06 c0       	rjmp	.+12     	; 0x742 <Timer_Init+0xc2>
 736:	a0 81       	ld	r26, Z
 738:	b0 e0       	ldi	r27, 0x00	; 0
 73a:	a4 59       	subi	r26, 0x94	; 148
 73c:	bf 4f       	sbci	r27, 0xFF	; 255
 73e:	82 e0       	ldi	r24, 0x02	; 2
 740:	8c 93       	st	X, r24
 742:	e0 81       	ld	r30, Z
 744:	f0 e0       	ldi	r31, 0x00	; 0
 746:	ea 59       	subi	r30, 0x9A	; 154
 748:	ff 4f       	sbci	r31, 0xFF	; 255
 74a:	81 e0       	ldi	r24, 0x01	; 1
 74c:	80 83       	st	Z, r24
 74e:	08 95       	ret
 750:	80 e0       	ldi	r24, 0x00	; 0
 752:	08 95       	ret
 754:	80 e0       	ldi	r24, 0x00	; 0
 756:	08 95       	ret
 758:	80 e0       	ldi	r24, 0x00	; 0
 75a:	08 95       	ret

Disassembly of section .text.Timer_Start:

000000a0 <Timer_Start>:
  a0:	81 30       	cpi	r24, 0x01	; 1
  a2:	09 f4       	brne	.+2      	; 0xa6 <Timer_Start+0x6>
  a4:	5a c0       	rjmp	.+180    	; 0x15a <Timer_Start+0xba>
  a6:	20 f0       	brcs	.+8      	; 0xb0 <Timer_Start+0x10>
  a8:	82 30       	cpi	r24, 0x02	; 2
  aa:	09 f4       	brne	.+2      	; 0xae <Timer_Start+0xe>
  ac:	ae c0       	rjmp	.+348    	; 0x20a <__EEPROM_REGION_LENGTH__+0xa>
  ae:	01 c1       	rjmp	.+514    	; 0x2b2 <__EEPROM_REGION_LENGTH__+0xb2>
  b0:	28 2f       	mov	r18, r24
  b2:	30 e0       	ldi	r19, 0x00	; 0
  b4:	f9 01       	movw	r30, r18
  b6:	ea 59       	subi	r30, 0x9A	; 154
  b8:	ff 4f       	sbci	r31, 0xFF	; 255
  ba:	80 81       	ld	r24, Z
  bc:	81 30       	cpi	r24, 0x01	; 1
  be:	09 f0       	breq	.+2      	; 0xc2 <Timer_Start+0x22>
  c0:	fa c0       	rjmp	.+500    	; 0x2b6 <__EEPROM_REGION_LENGTH__+0xb6>
  c2:	62 bf       	out	0x32, r22	; 50
  c4:	f9 01       	movw	r30, r18
  c6:	e4 59       	subi	r30, 0x94	; 148
  c8:	ff 4f       	sbci	r31, 0xFF	; 255
  ca:	90 81       	ld	r25, Z
  cc:	91 30       	cpi	r25, 0x01	; 1
  ce:	c9 f1       	breq	.+114    	; 0x142 <Timer_Start+0xa2>
  d0:	18 f0       	brcs	.+6      	; 0xd8 <Timer_Start+0x38>
  d2:	92 30       	cpi	r25, 0x02	; 2
  d4:	d9 f1       	breq	.+118    	; 0x14c <Timer_Start+0xac>
  d6:	f1 c0       	rjmp	.+482    	; 0x2ba <__EEPROM_REGION_LENGTH__+0xba>
  d8:	f9 01       	movw	r30, r18
  da:	e7 59       	subi	r30, 0x97	; 151
  dc:	ff 4f       	sbci	r31, 0xFF	; 255
  de:	20 81       	ld	r18, Z
  e0:	24 30       	cpi	r18, 0x04	; 4
  e2:	d1 f0       	breq	.+52     	; 0x118 <Timer_Start+0x78>
  e4:	28 f4       	brcc	.+10     	; 0xf0 <Timer_Start+0x50>
  e6:	21 30       	cpi	r18, 0x01	; 1
  e8:	41 f0       	breq	.+16     	; 0xfa <Timer_Start+0x5a>
  ea:	22 30       	cpi	r18, 0x02	; 2
  ec:	71 f0       	breq	.+28     	; 0x10a <Timer_Start+0x6a>
  ee:	e7 c0       	rjmp	.+462    	; 0x2be <__EEPROM_REGION_LENGTH__+0xbe>
  f0:	26 30       	cpi	r18, 0x06	; 6
  f2:	c9 f0       	breq	.+50     	; 0x126 <Timer_Start+0x86>
  f4:	27 30       	cpi	r18, 0x07	; 7
  f6:	f1 f0       	breq	.+60     	; 0x134 <Timer_Start+0x94>
  f8:	e2 c0       	rjmp	.+452    	; 0x2be <__EEPROM_REGION_LENGTH__+0xbe>
  fa:	83 b7       	in	r24, 0x33	; 51
  fc:	89 7f       	andi	r24, 0xF9	; 249
  fe:	83 bf       	out	0x33, r24	; 51
 100:	83 b7       	in	r24, 0x33	; 51
 102:	81 60       	ori	r24, 0x01	; 1
 104:	83 bf       	out	0x33, r24	; 51
 106:	82 2f       	mov	r24, r18
 108:	08 95       	ret
 10a:	93 b7       	in	r25, 0x33	; 51
 10c:	9a 7f       	andi	r25, 0xFA	; 250
 10e:	93 bf       	out	0x33, r25	; 51
 110:	93 b7       	in	r25, 0x33	; 51
 112:	92 60       	ori	r25, 0x02	; 2
 114:	93 bf       	out	0x33, r25	; 51
 116:	08 95       	ret
 118:	93 b7       	in	r25, 0x33	; 51
 11a:	9b 7f       	andi	r25, 0xFB	; 251
 11c:	93 bf       	out	0x33, r25	; 51
 11e:	93 b7       	in	r25, 0x33	; 51
 120:	93 60       	ori	r25, 0x03	; 3
 122:	93 bf       	out	0x33, r25	; 51
 124:	08 95       	ret
 126:	93 b7       	in	r25, 0x33	; 51
 128:	9c 7f       	andi	r25, 0xFC	; 252
 12a:	93 bf       	out	0x33, r25	; 51
 12c:	93 b7       	in	r25, 0x33	; 51
 12e:	94 60       	ori	r25, 0x04	; 4
 130:	93 bf       	out	0x33, r25	; 51
 132:	08 95       	ret
 134:	93 b7       	in	r25, 0x33	; 51
 136:	9d 7f       	andi	r25, 0xFD	; 253
 138:	93 bf       	out	0x33, r25	; 51
 13a:	93 b7       	in	r25, 0x33	; 51
 13c:	95 60       	ori	r25, 0x05	; 5
 13e:	93 bf       	out	0x33, r25	; 51
 140:	08 95       	ret
 142:	83 b7       	in	r24, 0x33	; 51
 144:	87 60       	ori	r24, 0x07	; 7
 146:	83 bf       	out	0x33, r24	; 51
 148:	89 2f       	mov	r24, r25
 14a:	08 95       	ret
 14c:	93 b7       	in	r25, 0x33	; 51
 14e:	96 60       	ori	r25, 0x06	; 6
 150:	93 bf       	out	0x33, r25	; 51
 152:	93 b7       	in	r25, 0x33	; 51
 154:	9e 7f       	andi	r25, 0xFE	; 254
 156:	93 bf       	out	0x33, r25	; 51
 158:	08 95       	ret
 15a:	28 2f       	mov	r18, r24
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	f9 01       	movw	r30, r18
 160:	ea 59       	subi	r30, 0x9A	; 154
 162:	ff 4f       	sbci	r31, 0xFF	; 255
 164:	80 81       	ld	r24, Z
 166:	81 30       	cpi	r24, 0x01	; 1
 168:	09 f0       	breq	.+2      	; 0x16c <Timer_Start+0xcc>
 16a:	ab c0       	rjmp	.+342    	; 0x2c2 <__EEPROM_REGION_LENGTH__+0xc2>
 16c:	60 95       	com	r22
 16e:	70 95       	com	r23
 170:	7d bd       	out	0x2d, r23	; 45
 172:	6c bd       	out	0x2c, r22	; 44
 174:	f9 01       	movw	r30, r18
 176:	e4 59       	subi	r30, 0x94	; 148
 178:	ff 4f       	sbci	r31, 0xFF	; 255
 17a:	90 81       	ld	r25, Z
 17c:	91 30       	cpi	r25, 0x01	; 1
 17e:	c9 f1       	breq	.+114    	; 0x1f2 <Timer_Start+0x152>
 180:	18 f0       	brcs	.+6      	; 0x188 <Timer_Start+0xe8>
 182:	92 30       	cpi	r25, 0x02	; 2
 184:	d9 f1       	breq	.+118    	; 0x1fc <Timer_Start+0x15c>
 186:	9f c0       	rjmp	.+318    	; 0x2c6 <__EEPROM_REGION_LENGTH__+0xc6>
 188:	f9 01       	movw	r30, r18
 18a:	e7 59       	subi	r30, 0x97	; 151
 18c:	ff 4f       	sbci	r31, 0xFF	; 255
 18e:	20 81       	ld	r18, Z
 190:	24 30       	cpi	r18, 0x04	; 4
 192:	d1 f0       	breq	.+52     	; 0x1c8 <Timer_Start+0x128>
 194:	28 f4       	brcc	.+10     	; 0x1a0 <Timer_Start+0x100>
 196:	21 30       	cpi	r18, 0x01	; 1
 198:	41 f0       	breq	.+16     	; 0x1aa <Timer_Start+0x10a>
 19a:	22 30       	cpi	r18, 0x02	; 2
 19c:	71 f0       	breq	.+28     	; 0x1ba <Timer_Start+0x11a>
 19e:	95 c0       	rjmp	.+298    	; 0x2ca <__EEPROM_REGION_LENGTH__+0xca>
 1a0:	26 30       	cpi	r18, 0x06	; 6
 1a2:	c9 f0       	breq	.+50     	; 0x1d6 <Timer_Start+0x136>
 1a4:	27 30       	cpi	r18, 0x07	; 7
 1a6:	f1 f0       	breq	.+60     	; 0x1e4 <Timer_Start+0x144>
 1a8:	90 c0       	rjmp	.+288    	; 0x2ca <__EEPROM_REGION_LENGTH__+0xca>
 1aa:	8e b5       	in	r24, 0x2e	; 46
 1ac:	89 7f       	andi	r24, 0xF9	; 249
 1ae:	8e bd       	out	0x2e, r24	; 46
 1b0:	8e b5       	in	r24, 0x2e	; 46
 1b2:	81 60       	ori	r24, 0x01	; 1
 1b4:	8e bd       	out	0x2e, r24	; 46
 1b6:	82 2f       	mov	r24, r18
 1b8:	08 95       	ret
 1ba:	9e b5       	in	r25, 0x2e	; 46
 1bc:	9a 7f       	andi	r25, 0xFA	; 250
 1be:	9e bd       	out	0x2e, r25	; 46
 1c0:	9e b5       	in	r25, 0x2e	; 46
 1c2:	92 60       	ori	r25, 0x02	; 2
 1c4:	9e bd       	out	0x2e, r25	; 46
 1c6:	08 95       	ret
 1c8:	9e b5       	in	r25, 0x2e	; 46
 1ca:	9b 7f       	andi	r25, 0xFB	; 251
 1cc:	9e bd       	out	0x2e, r25	; 46
 1ce:	9e b5       	in	r25, 0x2e	; 46
 1d0:	93 60       	ori	r25, 0x03	; 3
 1d2:	9e bd       	out	0x2e, r25	; 46
 1d4:	08 95       	ret
 1d6:	9e b5       	in	r25, 0x2e	; 46
 1d8:	9c 7f       	andi	r25, 0xFC	; 252
 1da:	9e bd       	out	0x2e, r25	; 46
 1dc:	9e b5       	in	r25, 0x2e	; 46
 1de:	94 60       	ori	r25, 0x04	; 4
 1e0:	9e bd       	out	0x2e, r25	; 46
 1e2:	08 95       	ret
 1e4:	9e b5       	in	r25, 0x2e	; 46
 1e6:	9d 7f       	andi	r25, 0xFD	; 253
 1e8:	9e bd       	out	0x2e, r25	; 46
 1ea:	9e b5       	in	r25, 0x2e	; 46
 1ec:	95 60       	ori	r25, 0x05	; 5
 1ee:	9e bd       	out	0x2e, r25	; 46
 1f0:	08 95       	ret
 1f2:	8e b5       	in	r24, 0x2e	; 46
 1f4:	87 60       	ori	r24, 0x07	; 7
 1f6:	8e bd       	out	0x2e, r24	; 46
 1f8:	89 2f       	mov	r24, r25
 1fa:	08 95       	ret
 1fc:	9e b5       	in	r25, 0x2e	; 46
 1fe:	96 60       	ori	r25, 0x06	; 6
 200:	9e bd       	out	0x2e, r25	; 46
 202:	9e b5       	in	r25, 0x2e	; 46
 204:	9e 7f       	andi	r25, 0xFE	; 254
 206:	9e bd       	out	0x2e, r25	; 46
 208:	08 95       	ret
 20a:	28 2f       	mov	r18, r24
 20c:	30 e0       	ldi	r19, 0x00	; 0
 20e:	f9 01       	movw	r30, r18
 210:	ea 59       	subi	r30, 0x9A	; 154
 212:	ff 4f       	sbci	r31, 0xFF	; 255
 214:	80 81       	ld	r24, Z
 216:	81 30       	cpi	r24, 0x01	; 1
 218:	09 f0       	breq	.+2      	; 0x21c <__EEPROM_REGION_LENGTH__+0x1c>
 21a:	59 c0       	rjmp	.+178    	; 0x2ce <__EEPROM_REGION_LENGTH__+0xce>
 21c:	60 95       	com	r22
 21e:	64 bd       	out	0x24, r22	; 36
 220:	f9 01       	movw	r30, r18
 222:	e4 59       	subi	r30, 0x94	; 148
 224:	ff 4f       	sbci	r31, 0xFF	; 255
 226:	90 81       	ld	r25, Z
 228:	99 23       	and	r25, r25
 22a:	29 f0       	breq	.+10     	; 0x236 <__EEPROM_REGION_LENGTH__+0x36>
 22c:	93 30       	cpi	r25, 0x03	; 3
 22e:	08 f4       	brcc	.+2      	; 0x232 <__EEPROM_REGION_LENGTH__+0x32>
 230:	51 c0       	rjmp	.+162    	; 0x2d4 <__EEPROM_REGION_LENGTH__+0xd4>
 232:	80 e0       	ldi	r24, 0x00	; 0
 234:	08 95       	ret
 236:	f9 01       	movw	r30, r18
 238:	e7 59       	subi	r30, 0x97	; 151
 23a:	ff 4f       	sbci	r31, 0xFF	; 255
 23c:	20 81       	ld	r18, Z
 23e:	42 2f       	mov	r20, r18
 240:	50 e0       	ldi	r21, 0x00	; 0
 242:	fa 01       	movw	r30, r20
 244:	31 97       	sbiw	r30, 0x01	; 1
 246:	e7 30       	cpi	r30, 0x07	; 7
 248:	f1 05       	cpc	r31, r1
 24a:	08 f0       	brcs	.+2      	; 0x24e <__EEPROM_REGION_LENGTH__+0x4e>
 24c:	42 c0       	rjmp	.+132    	; 0x2d2 <__EEPROM_REGION_LENGTH__+0xd2>
 24e:	ed 5e       	subi	r30, 0xED	; 237
 250:	ff 4f       	sbci	r31, 0xFF	; 255
 252:	09 94       	ijmp
 254:	85 b5       	in	r24, 0x25	; 37
 256:	89 7f       	andi	r24, 0xF9	; 249
 258:	85 bd       	out	0x25, r24	; 37
 25a:	85 b5       	in	r24, 0x25	; 37
 25c:	81 60       	ori	r24, 0x01	; 1
 25e:	85 bd       	out	0x25, r24	; 37
 260:	82 2f       	mov	r24, r18
 262:	08 95       	ret
 264:	95 b5       	in	r25, 0x25	; 37
 266:	9a 7f       	andi	r25, 0xFA	; 250
 268:	95 bd       	out	0x25, r25	; 37
 26a:	95 b5       	in	r25, 0x25	; 37
 26c:	92 60       	ori	r25, 0x02	; 2
 26e:	95 bd       	out	0x25, r25	; 37
 270:	08 95       	ret
 272:	95 b5       	in	r25, 0x25	; 37
 274:	9b 7f       	andi	r25, 0xFB	; 251
 276:	95 bd       	out	0x25, r25	; 37
 278:	95 b5       	in	r25, 0x25	; 37
 27a:	93 60       	ori	r25, 0x03	; 3
 27c:	95 bd       	out	0x25, r25	; 37
 27e:	08 95       	ret
 280:	95 b5       	in	r25, 0x25	; 37
 282:	9c 7f       	andi	r25, 0xFC	; 252
 284:	95 bd       	out	0x25, r25	; 37
 286:	95 b5       	in	r25, 0x25	; 37
 288:	94 60       	ori	r25, 0x04	; 4
 28a:	95 bd       	out	0x25, r25	; 37
 28c:	08 95       	ret
 28e:	95 b5       	in	r25, 0x25	; 37
 290:	9d 7f       	andi	r25, 0xFD	; 253
 292:	95 bd       	out	0x25, r25	; 37
 294:	95 b5       	in	r25, 0x25	; 37
 296:	95 60       	ori	r25, 0x05	; 5
 298:	95 bd       	out	0x25, r25	; 37
 29a:	08 95       	ret
 29c:	95 b5       	in	r25, 0x25	; 37
 29e:	9e 7f       	andi	r25, 0xFE	; 254
 2a0:	95 bd       	out	0x25, r25	; 37
 2a2:	95 b5       	in	r25, 0x25	; 37
 2a4:	96 60       	ori	r25, 0x06	; 6
 2a6:	95 bd       	out	0x25, r25	; 37
 2a8:	08 95       	ret
 2aa:	95 b5       	in	r25, 0x25	; 37
 2ac:	97 60       	ori	r25, 0x07	; 7
 2ae:	95 bd       	out	0x25, r25	; 37
 2b0:	08 95       	ret
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	08 95       	ret
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	08 95       	ret
 2ba:	80 e0       	ldi	r24, 0x00	; 0
 2bc:	08 95       	ret
 2be:	89 2f       	mov	r24, r25
 2c0:	08 95       	ret
 2c2:	80 e0       	ldi	r24, 0x00	; 0
 2c4:	08 95       	ret
 2c6:	80 e0       	ldi	r24, 0x00	; 0
 2c8:	08 95       	ret
 2ca:	89 2f       	mov	r24, r25
 2cc:	08 95       	ret
 2ce:	80 e0       	ldi	r24, 0x00	; 0
 2d0:	08 95       	ret
 2d2:	89 2f       	mov	r24, r25
 2d4:	08 95       	ret

Disassembly of section .text.Timer_Stop:

00000bb2 <Timer_Stop>:
 bb2:	81 30       	cpi	r24, 0x01	; 1
 bb4:	79 f0       	breq	.+30     	; 0xbd4 <Timer_Stop+0x22>
 bb6:	18 f0       	brcs	.+6      	; 0xbbe <Timer_Stop+0xc>
 bb8:	82 30       	cpi	r24, 0x02	; 2
 bba:	b9 f0       	breq	.+46     	; 0xbea <Timer_Stop+0x38>
 bbc:	21 c0       	rjmp	.+66     	; 0xc00 <Timer_Stop+0x4e>
 bbe:	e8 2f       	mov	r30, r24
 bc0:	f0 e0       	ldi	r31, 0x00	; 0
 bc2:	ea 59       	subi	r30, 0x9A	; 154
 bc4:	ff 4f       	sbci	r31, 0xFF	; 255
 bc6:	80 81       	ld	r24, Z
 bc8:	81 30       	cpi	r24, 0x01	; 1
 bca:	e1 f4       	brne	.+56     	; 0xc04 <Timer_Stop+0x52>
 bcc:	93 b7       	in	r25, 0x33	; 51
 bce:	98 7f       	andi	r25, 0xF8	; 248
 bd0:	93 bf       	out	0x33, r25	; 51
 bd2:	08 95       	ret
 bd4:	e8 2f       	mov	r30, r24
 bd6:	f0 e0       	ldi	r31, 0x00	; 0
 bd8:	ea 59       	subi	r30, 0x9A	; 154
 bda:	ff 4f       	sbci	r31, 0xFF	; 255
 bdc:	80 81       	ld	r24, Z
 bde:	81 30       	cpi	r24, 0x01	; 1
 be0:	99 f4       	brne	.+38     	; 0xc08 <Timer_Stop+0x56>
 be2:	9e b5       	in	r25, 0x2e	; 46
 be4:	98 7f       	andi	r25, 0xF8	; 248
 be6:	9e bd       	out	0x2e, r25	; 46
 be8:	08 95       	ret
 bea:	e8 2f       	mov	r30, r24
 bec:	f0 e0       	ldi	r31, 0x00	; 0
 bee:	ea 59       	subi	r30, 0x9A	; 154
 bf0:	ff 4f       	sbci	r31, 0xFF	; 255
 bf2:	80 81       	ld	r24, Z
 bf4:	81 30       	cpi	r24, 0x01	; 1
 bf6:	51 f4       	brne	.+20     	; 0xc0c <Timer_Stop+0x5a>
 bf8:	95 b5       	in	r25, 0x25	; 37
 bfa:	98 7f       	andi	r25, 0xF8	; 248
 bfc:	95 bd       	out	0x25, r25	; 37
 bfe:	08 95       	ret
 c00:	80 e0       	ldi	r24, 0x00	; 0
 c02:	08 95       	ret
 c04:	80 e0       	ldi	r24, 0x00	; 0
 c06:	08 95       	ret
 c08:	80 e0       	ldi	r24, 0x00	; 0
 c0a:	08 95       	ret
 c0c:	80 e0       	ldi	r24, 0x00	; 0
 c0e:	08 95       	ret

Disassembly of section .text.__vector_9:

00000c10 <__vector_9>:

ISR(TIMER0_OVF_vect)
{
 c10:	1f 92       	push	r1
 c12:	0f 92       	push	r0
 c14:	0f b6       	in	r0, 0x3f	; 63
 c16:	0f 92       	push	r0
 c18:	11 24       	eor	r1, r1
 c1a:	2f 93       	push	r18
 c1c:	3f 93       	push	r19
 c1e:	4f 93       	push	r20
 c20:	5f 93       	push	r21
 c22:	6f 93       	push	r22
 c24:	7f 93       	push	r23
 c26:	8f 93       	push	r24
 c28:	9f 93       	push	r25
 c2a:	af 93       	push	r26
 c2c:	bf 93       	push	r27
 c2e:	ef 93       	push	r30
 c30:	ff 93       	push	r31
	Timer_OVF_CBK_Ptr[0]();
 c32:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 c36:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 c3a:	09 95       	icall
}
 c3c:	ff 91       	pop	r31
 c3e:	ef 91       	pop	r30
 c40:	bf 91       	pop	r27
 c42:	af 91       	pop	r26
 c44:	9f 91       	pop	r25
 c46:	8f 91       	pop	r24
 c48:	7f 91       	pop	r23
 c4a:	6f 91       	pop	r22
 c4c:	5f 91       	pop	r21
 c4e:	4f 91       	pop	r20
 c50:	3f 91       	pop	r19
 c52:	2f 91       	pop	r18
 c54:	0f 90       	pop	r0
 c56:	0f be       	out	0x3f, r0	; 63
 c58:	0f 90       	pop	r0
 c5a:	1f 90       	pop	r1
 c5c:	18 95       	reti

Disassembly of section .text.__vector_8:

00000c5e <__vector_8>:

ISR(TIMER1_OVF_vect)
{
 c5e:	1f 92       	push	r1
 c60:	0f 92       	push	r0
 c62:	0f b6       	in	r0, 0x3f	; 63
 c64:	0f 92       	push	r0
 c66:	11 24       	eor	r1, r1
 c68:	2f 93       	push	r18
 c6a:	3f 93       	push	r19
 c6c:	4f 93       	push	r20
 c6e:	5f 93       	push	r21
 c70:	6f 93       	push	r22
 c72:	7f 93       	push	r23
 c74:	8f 93       	push	r24
 c76:	9f 93       	push	r25
 c78:	af 93       	push	r26
 c7a:	bf 93       	push	r27
 c7c:	ef 93       	push	r30
 c7e:	ff 93       	push	r31
	Timer_OVF_CBK_Ptr[1]();
 c80:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 c84:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 c88:	09 95       	icall
}
 c8a:	ff 91       	pop	r31
 c8c:	ef 91       	pop	r30
 c8e:	bf 91       	pop	r27
 c90:	af 91       	pop	r26
 c92:	9f 91       	pop	r25
 c94:	8f 91       	pop	r24
 c96:	7f 91       	pop	r23
 c98:	6f 91       	pop	r22
 c9a:	5f 91       	pop	r21
 c9c:	4f 91       	pop	r20
 c9e:	3f 91       	pop	r19
 ca0:	2f 91       	pop	r18
 ca2:	0f 90       	pop	r0
 ca4:	0f be       	out	0x3f, r0	; 63
 ca6:	0f 90       	pop	r0
 ca8:	1f 90       	pop	r1
 caa:	18 95       	reti

Disassembly of section .text.__vector_4:

00000cac <__vector_4>:

ISR(TIMER2_OVF_vect)
{
 cac:	1f 92       	push	r1
 cae:	0f 92       	push	r0
 cb0:	0f b6       	in	r0, 0x3f	; 63
 cb2:	0f 92       	push	r0
 cb4:	11 24       	eor	r1, r1
 cb6:	2f 93       	push	r18
 cb8:	3f 93       	push	r19
 cba:	4f 93       	push	r20
 cbc:	5f 93       	push	r21
 cbe:	6f 93       	push	r22
 cc0:	7f 93       	push	r23
 cc2:	8f 93       	push	r24
 cc4:	9f 93       	push	r25
 cc6:	af 93       	push	r26
 cc8:	bf 93       	push	r27
 cca:	ef 93       	push	r30
 ccc:	ff 93       	push	r31
	Timer_OVF_CBK_Ptr[2]();
 cce:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
 cd2:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
 cd6:	09 95       	icall
}
 cd8:	ff 91       	pop	r31
 cda:	ef 91       	pop	r30
 cdc:	bf 91       	pop	r27
 cde:	af 91       	pop	r26
 ce0:	9f 91       	pop	r25
 ce2:	8f 91       	pop	r24
 ce4:	7f 91       	pop	r23
 ce6:	6f 91       	pop	r22
 ce8:	5f 91       	pop	r21
 cea:	4f 91       	pop	r20
 cec:	3f 91       	pop	r19
 cee:	2f 91       	pop	r18
 cf0:	0f 90       	pop	r0
 cf2:	0f be       	out	0x3f, r0	; 63
 cf4:	0f 90       	pop	r0
 cf6:	1f 90       	pop	r1
 cf8:	18 95       	reti

Disassembly of section .text.__dummy_fini:

00000d60 <_fini>:
 d60:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000d62 <__funcs_on_exit>:
 d62:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000d64 <__simulator_exit>:
 d64:	08 95       	ret

Disassembly of section .text.exit:

00000d50 <exit>:
 d50:	ec 01       	movw	r28, r24
 d52:	07 d0       	rcall	.+14     	; 0xd62 <__funcs_on_exit>
 d54:	05 d0       	rcall	.+10     	; 0xd60 <_fini>
 d56:	ce 01       	movw	r24, r28
 d58:	05 d0       	rcall	.+10     	; 0xd64 <__simulator_exit>
 d5a:	ce 01       	movw	r24, r28
 d5c:	04 d0       	rcall	.+8      	; 0xd66 <_Exit>

Disassembly of section .text._Exit:

00000d66 <_Exit>:
 d66:	95 d9       	rcall	.-3286   	; 0x92 <_exit>
